<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Benedict</title>
  
  
  <link href="https://benedict-cs.github.io/hexo-en/atom.xml" rel="self"/>
  
  <link href="https://benedict-cs.github.io/hexo-en/"/>
  <updated>2024-07-03T04:28:13.592Z</updated>
  <id>https://benedict-cs.github.io/hexo-en/</id>
  
  <author>
    <name>Benedict</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>System Information Fetching Kernel Module</title>
    <link href="https://benedict-cs.github.io/hexo-en/2024/11/14/kernel_module/"/>
    <id>https://benedict-cs.github.io/hexo-en/2024/11/14/kernel_module/</id>
    <published>2024-11-13T22:40:12.000Z</published>
    <updated>2024-07-03T04:28:13.592Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Assignment 3: System Information Fetching Kernel Module<ul><li>Linux Kernel Module</li><li>Descriptions</li><li>Kernel Module: kfetch_mod<ul><li>Kfetch information mask</li><li>Device operations</li></ul></li><li>Requirements<ul><li>Default logo</li></ul></li></ul></li></ul><p>In this assignment, you are going to implement a kernel module that fetches the system information from the kernel, like below screenshot:</p>   <div>                                                    <img alt="張永義 競賽圖片" data-src="/hexo/images/OS_3/OS_1.png" />                                                </div><h2 id="Implement-a-kernel-module-fetches-system-info-from-kernel"><a href="#Implement-a-kernel-module-fetches-system-info-from-kernel" class="headerlink" title="Implement a kernel module fetches system info from kernel"></a>Implement a kernel module fetches system info from kernel</h2><p><strong>Step 0: Create new program</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim kfetch_mod_312551002.c</span><br></pre></td></tr></table></figure><p><strong>Step 1: Implement the fetches system information function</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/cdev.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/uaccess.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/mm.h&gt;</span>       <span class="comment">// For si_meminfo</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/utsname.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/timekeeping.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/sched/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/cpu.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/sched/signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/utsname.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEVICE_NAME <span class="string">&quot;kfetch_mod_312551002&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CLASS_NAME <span class="string">&quot;kfetch&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFER_SIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Information mask definitions</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KFETCH_NUM_INFO 6</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KFETCH_RELEASE   (1 &lt;&lt; 0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KFETCH_NUM_CPUS  (1 &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KFETCH_CPU_MODEL (1 &lt;&lt; 2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KFETCH_MEM       (1 &lt;&lt; 3)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KFETCH_UPTIME    (1 &lt;&lt; 4)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KFETCH_NUM_PROCS (1 &lt;&lt; 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KFETCH_FULL_INFO ((1 &lt;&lt; KFETCH_NUM_INFO) - 1)</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> majorNumber;</span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="keyword">class</span> *<span class="title">kfetchClass</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">cdev</span> <span class="title">kfetchCdev</span>;</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> mask_info = KFETCH_FULL_INFO;</span><br><span class="line"><span class="type">static</span> <span class="type">char</span> data_buffer[BUFFER_SIZE];</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">dev_open</span><span class="params">(<span class="keyword">struct</span> inode *, <span class="keyword">struct</span> file *)</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">ssize_t</span> <span class="title function_">dev_read</span><span class="params">(<span class="keyword">struct</span> file *, <span class="type">char</span> *, <span class="type">size_t</span>, <span class="type">loff_t</span> *)</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">ssize_t</span> <span class="title function_">dev_write</span><span class="params">(<span class="keyword">struct</span> file *, <span class="type">const</span> <span class="type">char</span> __user *, <span class="type">size_t</span>, <span class="type">loff_t</span> *)</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">dev_release</span><span class="params">(<span class="keyword">struct</span> inode *, <span class="keyword">struct</span> file *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">fops</span> =</span> &#123;</span><br><span class="line">    .open = dev_open,</span><br><span class="line">    .read = dev_read,</span><br><span class="line">    .write = dev_write,</span><br><span class="line">    .release = dev_release,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> __init <span class="title function_">kfetch_init</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    printk(KERN_INFO <span class="string">&quot;Kfetch: Initializing the Kfetch Module\n&quot;</span>);</span><br><span class="line">    majorNumber = register_chrdev(<span class="number">0</span>, DEVICE_NAME, &amp;fops);</span><br><span class="line">    <span class="keyword">if</span> (majorNumber &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(KERN_ALERT <span class="string">&quot;Kfetch failed to register a major number\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> majorNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(KERN_INFO <span class="string">&quot;Kfetch: Registered with major number %d\n&quot;</span>, majorNumber);</span><br><span class="line">    kfetchClass = class_create(THIS_MODULE, CLASS_NAME);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (IS_ERR(kfetchClass)) &#123;</span><br><span class="line">        unregister_chrdev(majorNumber, DEVICE_NAME);</span><br><span class="line">        printk(KERN_ALERT <span class="string">&quot;Failed to register device class\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> PTR_ERR(kfetchClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (IS_ERR(device_create(kfetchClass, <span class="literal">NULL</span>, MKDEV(majorNumber, <span class="number">0</span>), <span class="literal">NULL</span>, DEVICE_NAME))) &#123;</span><br><span class="line">        class_destroy(kfetchClass);</span><br><span class="line">        unregister_chrdev(majorNumber, DEVICE_NAME);</span><br><span class="line">        printk(KERN_ALERT <span class="string">&quot;Failed to create the device\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> PTR_ERR(device_create(kfetchClass, <span class="literal">NULL</span>, MKDEV(majorNumber, <span class="number">0</span>), <span class="literal">NULL</span>, DEVICE_NAME));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cdev_init(&amp;kfetchCdev, &amp;fops);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cdev_add(&amp;kfetchCdev, MKDEV(majorNumber, <span class="number">0</span>), <span class="number">1</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        device_destroy(kfetchClass, MKDEV(majorNumber, <span class="number">0</span>));</span><br><span class="line">        class_destroy(kfetchClass);</span><br><span class="line">        unregister_chrdev(majorNumber, DEVICE_NAME);</span><br><span class="line">        printk(KERN_ALERT <span class="string">&quot;Failed to add cdev\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(KERN_INFO <span class="string">&quot;Kfetch: Device class created correctly\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> __exit <span class="title function_">kfetch_exit</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    cdev_del(&amp;kfetchCdev);</span><br><span class="line">    device_destroy(kfetchClass, MKDEV(majorNumber, <span class="number">0</span>));</span><br><span class="line">    class_destroy(kfetchClass);</span><br><span class="line">    unregister_chrdev(majorNumber, DEVICE_NAME);</span><br><span class="line">    printk(KERN_INFO <span class="string">&quot;Kfetch: Module successfully unloaded\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">dev_open</span><span class="params">(<span class="keyword">struct</span> inode *inodep, <span class="keyword">struct</span> file *filep)</span> &#123;</span><br><span class="line">    printk(KERN_INFO <span class="string">&quot;Kfetch: Device has been opened\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">dev_release</span><span class="params">(<span class="keyword">struct</span> inode *inodep, <span class="keyword">struct</span> file *filep)</span> &#123;</span><br><span class="line">    printk(KERN_INFO <span class="string">&quot;Kfetch: Device successfully closed\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">ssize_t</span> <span class="title function_">dev_read</span><span class="params">(<span class="keyword">struct</span> file *filep, <span class="type">char</span> *buffer, <span class="type">size_t</span> len, <span class="type">loff_t</span> *offset)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sysinfo</span> <span class="title">si</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timespec64</span> <span class="title">uptime</span>;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> mem_free_mb, mem_total_mb, uptime_seconds;</span><br><span class="line">    <span class="type">int</span> num_procs = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">task</span>;</span></span><br><span class="line">    <span class="type">char</span> *info = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">char</span> *formatted_output = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">char</span> *info_ptr;</span><br><span class="line">    <span class="type">char</span> *line;</span><br><span class="line">    <span class="type">char</span> *next_info;</span><br><span class="line">    <span class="type">char</span> *next_line;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> hostname[<span class="number">65</span>]; <span class="comment">// HOST_NAME_MAX typically is 64</span></span><br><span class="line">    <span class="type">char</span> separator_line[<span class="number">65</span>]; <span class="comment">// Same size as hostname for simplicity</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *logo_lines[] = &#123;</span><br><span class="line">        <span class="string">&quot;       \e[33mLinux\e[0m        &quot;</span>,</span><br><span class="line">        <span class="string">&quot;        .-.        &quot;</span>,</span><br><span class="line">        <span class="string">&quot;       (.. |       &quot;</span>,</span><br><span class="line">        <span class="string">&quot;       \e[33m&lt;&gt;\e[0m  |        &quot;</span>,</span><br><span class="line">        <span class="string">&quot;      / --- \\      &quot;</span>,</span><br><span class="line">        <span class="string">&quot;     ( |   | |     &quot;</span>,</span><br><span class="line">        <span class="string">&quot;   \e[33m|\\\e[0m\\_)___/\\)\e[33m/\\\e[0m    &quot;</span>,</span><br><span class="line">        <span class="string">&quot;  \e[33m&lt;__)\e[0m------\e[33m(__/\e[0m    &quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">size_t</span> hostname_len;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialize the hostname and separator_line</span></span><br><span class="line">    <span class="built_in">memset</span>(hostname, <span class="number">0</span>, <span class="keyword">sizeof</span>(hostname));</span><br><span class="line">    <span class="built_in">strncpy</span>(hostname, init_uts_ns.name.nodename, <span class="keyword">sizeof</span>(hostname) - <span class="number">1</span>);</span><br><span class="line">    hostname_len = <span class="built_in">strlen</span>(hostname);</span><br><span class="line">    <span class="built_in">memset</span>(separator_line, <span class="string">&#x27;-&#x27;</span>, hostname_len);</span><br><span class="line">    separator_line[hostname_len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Clear the buffer</span></span><br><span class="line">    <span class="built_in">memset</span>(data_buffer, <span class="number">0</span>, BUFFER_SIZE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Gather system information</span></span><br><span class="line">    si_meminfo(&amp;si);</span><br><span class="line">    ktime_get_boottime_ts64(&amp;uptime);</span><br><span class="line">    for_each_process(task) <span class="keyword">if</span> (task-&gt;mm) num_procs++;</span><br><span class="line"></span><br><span class="line">    mem_free_mb = (si.freeram * si.mem_unit) / <span class="number">1024</span> / <span class="number">1024</span>;</span><br><span class="line">    mem_total_mb = (si.totalram * si.mem_unit) / <span class="number">1024</span> / <span class="number">1024</span>;</span><br><span class="line">    uptime_seconds = uptime.tv_sec;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Allocate info buffer dynamically</span></span><br><span class="line">    info = kmalloc(BUFFER_SIZE, GFP_KERNEL);</span><br><span class="line">    formatted_output = kmalloc(BUFFER_SIZE, GFP_KERNEL);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!info || !formatted_output) &#123;</span><br><span class="line">        kfree(info); <span class="comment">// It&#x27;s safe to call kfree with NULL</span></span><br><span class="line">        kfree(formatted_output);</span><br><span class="line">        <span class="keyword">return</span> -ENOMEM;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Prepare the info string with proper padding for each line</span></span><br><span class="line">    info_ptr = info;</span><br><span class="line">    info_ptr += <span class="built_in">snprintf</span>(info_ptr, BUFFER_SIZE - (info_ptr - info), <span class="string">&quot;\e[33m%s\e[0m\n%s\n&quot;</span>, hostname, separator_line);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Concatenate information based on the mask_info</span></span><br><span class="line">    <span class="keyword">if</span> (mask_info &amp; KFETCH_RELEASE || mask_info == KFETCH_FULL_INFO) &#123;</span><br><span class="line">        info_ptr += <span class="built_in">snprintf</span>(info_ptr, BUFFER_SIZE - (info_ptr - info), <span class="string">&quot;\e[33mKernel:\e[0m  %-20s\n&quot;</span>, utsname()-&gt;release);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mask_info &amp; KFETCH_CPU_MODEL || mask_info == KFETCH_FULL_INFO) &#123;</span><br><span class="line">        info_ptr += <span class="built_in">snprintf</span>(info_ptr, BUFFER_SIZE - (info_ptr - info), <span class="string">&quot;\e[33mCPU:\e[0m     %-20s\n&quot;</span>, boot_cpu_data.x86_model_id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mask_info &amp; KFETCH_NUM_CPUS || mask_info == KFETCH_FULL_INFO) &#123;</span><br><span class="line">        info_ptr += <span class="built_in">snprintf</span>(info_ptr, BUFFER_SIZE - (info_ptr - info), <span class="string">&quot;\e[33mCPUs:\e[0m    %d / %-14d\n&quot;</span>, num_online_cpus(), num_possible_cpus());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mask_info &amp; KFETCH_MEM || mask_info == KFETCH_FULL_INFO) &#123;</span><br><span class="line">        info_ptr += <span class="built_in">snprintf</span>(info_ptr, BUFFER_SIZE - (info_ptr - info), <span class="string">&quot;\e[33mMem:\e[0m     %lu MB / %lu MB\n&quot;</span>, mem_free_mb, mem_total_mb);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mask_info &amp; KFETCH_NUM_PROCS || mask_info == KFETCH_FULL_INFO) &#123;</span><br><span class="line">        info_ptr += <span class="built_in">snprintf</span>(info_ptr, BUFFER_SIZE - (info_ptr - info), <span class="string">&quot;\e[33mProcs:\e[0m   %-d\n&quot;</span>, num_procs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mask_info &amp; KFETCH_UPTIME || mask_info == KFETCH_FULL_INFO) &#123;</span><br><span class="line">        info_ptr += <span class="built_in">snprintf</span>(info_ptr, BUFFER_SIZE - (info_ptr - info), <span class="string">&quot;\e[33mUptime:\e[0m  %-lu mins\n&quot;</span>, uptime_seconds / <span class="number">60</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Formatting the output to align side by side with the logo</span></span><br><span class="line">    next_info = info;</span><br><span class="line">    line = formatted_output;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ARRAY_SIZE(logo_lines) || next_info; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; ARRAY_SIZE(logo_lines)) &#123;</span><br><span class="line">            line += <span class="built_in">sprintf</span>(line, <span class="string">&quot;%-20s&quot;</span>, logo_lines[i]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            line += <span class="built_in">sprintf</span>(line, <span class="string">&quot;%-20s&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (next_info) &#123;</span><br><span class="line">            next_line = <span class="built_in">strchr</span>(next_info, <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (next_line) *next_line = <span class="string">&#x27;\0&#x27;</span>; <span class="comment">// Terminate the current line</span></span><br><span class="line">            line += <span class="built_in">sprintf</span>(line, <span class="string">&quot; %s\n&quot;</span>, next_info);</span><br><span class="line">            next_info = next_line ? next_line + <span class="number">1</span> : <span class="literal">NULL</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            line += <span class="built_in">sprintf</span>(line, <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Copy the formatted buffer to user space</span></span><br><span class="line">    <span class="keyword">if</span> (copy_to_user(buffer, formatted_output, <span class="built_in">strlen</span>(formatted_output))) &#123;</span><br><span class="line">        kfree(info);</span><br><span class="line">        kfree(formatted_output);</span><br><span class="line">        <span class="keyword">return</span> -EFAULT; <span class="comment">// Failed to copy to user space</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Free the dynamically allocated buffers</span></span><br><span class="line">    kfree(info);</span><br><span class="line">    kfree(formatted_output);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Return the number of characters sent</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strlen</span>(formatted_output);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">ssize_t</span> <span class="title function_">dev_write</span><span class="params">(<span class="keyword">struct</span> file *filep, <span class="type">const</span> <span class="type">char</span> __user *buffer, <span class="type">size_t</span> len, <span class="type">loff_t</span> *offset)</span> &#123;</span><br><span class="line">    <span class="comment">// Update mask_info based on user input</span></span><br><span class="line">    <span class="keyword">if</span> (len == <span class="keyword">sizeof</span>(<span class="type">int</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (copy_from_user(&amp;mask_info, buffer, <span class="keyword">sizeof</span>(<span class="type">int</span>))) &#123;</span><br><span class="line">            printk(KERN_ERR <span class="string">&quot;Kfetch: Error setting mask_info\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> -EFAULT;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        printk(KERN_INFO <span class="string">&quot;Kfetch: Mask set to %d\n&quot;</span>, mask_info);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">sizeof</span>(<span class="type">int</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        printk(KERN_ERR <span class="string">&quot;Kfetch: Incorrect mask size\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(kfetch_init);</span><br><span class="line">module_exit(kfetch_exit);</span><br><span class="line"></span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br><span class="line">MODULE_AUTHOR(<span class="string">&quot;Benedict&quot;</span>);</span><br><span class="line">MODULE_DESCRIPTION(<span class="string">&quot;System Information Fetching Kernel Module&quot;</span>);</span><br><span class="line">MODULE_VERSION(<span class="string">&quot;0.1&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>Step 3: Create new Makefile</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim Makefile</span><br></pre></td></tr></table></figure><p><strong>Step 4: Implement a Makefile</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">obj-m += kfetch_mod_312551002.o</span><br><span class="line"></span><br><span class="line">DEVICE_NAME := kfetch_mod_312551002</span><br><span class="line"></span><br><span class="line"># Use shell to grab the major number dynamically. This will be empty <span class="keyword">if</span> the device is not loaded.</span><br><span class="line">MAJOR_NUMBER := $(shell grep $(DEVICE_NAME) /proc/devices | cut -d <span class="string">&#x27; &#x27;</span> -f <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">all: build unload remove_device_node load create_device_node</span><br><span class="line"></span><br><span class="line">build:</span><br><span class="line">make -C /lib/modules/$(shell uname -r)/build M=$(PWD) modules</span><br><span class="line"></span><br><span class="line">load: </span><br><span class="line"># Check <span class="keyword">if</span> module is already loaded, <span class="keyword">if</span> yes, remove it</span><br><span class="line">@<span class="keyword">if</span> lsmod | grep $(DEVICE_NAME) &amp;&gt; /dev/null ; then \</span><br><span class="line">echo <span class="string">&quot;Module $(DEVICE_NAME) is already loaded, unloading first...&quot;</span>; \</span><br><span class="line">sudo rmmod $(DEVICE_NAME) || <span class="literal">true</span>; \</span><br><span class="line">fi</span><br><span class="line"># Insert the module</span><br><span class="line">sudo insmod $(DEVICE_NAME).ko</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create_device_node:</span><br><span class="line"># Check <span class="keyword">if</span> device node already exists, <span class="keyword">if</span> not, create it</span><br><span class="line">@<span class="keyword">if</span> [ ! -e /dev/$(DEVICE_NAME) ] ; then \</span><br><span class="line">echo <span class="string">&quot;Creating device node /dev/$(DEVICE_NAME)...&quot;</span>; \</span><br><span class="line">sudo mknod /dev/$(DEVICE_NAME) c $(MAJOR_NUMBER) <span class="number">0</span> ; \</span><br><span class="line">sudo chmod <span class="number">666</span> /dev/$(DEVICE_NAME) ; \</span><br><span class="line"><span class="keyword">else</span> \</span><br><span class="line">echo <span class="string">&quot;Device node /dev/$(DEVICE_NAME) already exists.&quot;</span>; \</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">clean:</span><br><span class="line">make -C /lib/modules/$(shell uname -r)/build M=$(PWD) clean</span><br><span class="line"></span><br><span class="line">unload:</span><br><span class="line"># Remove the module <span class="keyword">if</span> it is loaded</span><br><span class="line">@<span class="keyword">if</span> lsmod | grep $(DEVICE_NAME) &amp;&gt; /dev/null ; then \</span><br><span class="line">echo <span class="string">&quot;Unloading module $(DEVICE_NAME)...&quot;</span>; \</span><br><span class="line">sudo rmmod $(DEVICE_NAME) || <span class="literal">true</span>; \</span><br><span class="line"><span class="keyword">else</span> \</span><br><span class="line">echo <span class="string">&quot;Module $(DEVICE_NAME) is not loaded.&quot;</span>; \</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">remove_device_node:</span><br><span class="line"># Remove the device node <span class="keyword">if</span> it exists</span><br><span class="line">@<span class="keyword">if</span> [ -e /dev/$(DEVICE_NAME) ] ; then \</span><br><span class="line">echo <span class="string">&quot;Removing device node /dev/$(DEVICE_NAME)...&quot;</span>; \</span><br><span class="line">sudo rm -f /dev/$(DEVICE_NAME) ; \</span><br><span class="line"><span class="keyword">else</span> \</span><br><span class="line">echo <span class="string">&quot;Device node /dev/$(DEVICE_NAME) does not exist.&quot;</span>; \</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">.PHONY: all build load create_device_node clean unload remove_device_node</span><br></pre></td></tr></table></figure><p><strong>Step 5: Compile written program</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p><strong>Step 6: Compile test program</strong><br>We have prepared the user-space program kfetch for you. Source code <code>kfetch.c</code> and the header file (shared with the kernel module) <code>kfetch.h</code> to test your module.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cc 。、kfetch.c -o kfetch</span><br></pre></td></tr></table></figure><p><strong>Step 7: Test the program</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./kfetch -h</span><br></pre></td></tr></table></figure>   <div>                                                    <img alt="張永義 競賽圖片" data-src="/hexo/images/OS_3/OS_2.png" />                                                </div><p><strong>Step 8: Test the program</strong><br>Initially, when the module is loaded, the first invocation without any options will display all the information. If the options -c and m are specified, only the information about the CPU model name and the memory will be displayed.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./kfetch -a</span><br></pre></td></tr></table></figure>   <div>                                                    <img alt="張永義 競賽圖片" data-src="/hexo/images/OS_3/OS_3.png" />                                                </div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./kfetch -m -c</span><br></pre></td></tr></table></figure>   <div>                                                    <img alt="張永義 競賽圖片" data-src="/hexo/images/OS_3/OS_4.png" />                                                </div>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;Assignment 3: System Information Fetching Kernel Module&lt;ul&gt;
&lt;li&gt;Linux Kernel Module&lt;/li&gt;
&lt;li&gt;Descriptions&lt;/li&gt;
&lt;li&gt;Kernel Module: k</summary>
      
    
    
    
    <category term="OS" scheme="https://benedict-cs.github.io/hexo-en/categories/OS/"/>
    
    
    <category term="OS" scheme="https://benedict-cs.github.io/hexo-en/tags/OS/"/>
    
    <category term="Linux Kernel" scheme="https://benedict-cs.github.io/hexo-en/tags/Linux-Kernel/"/>
    
  </entry>
  
  <entry>
    <title>Apply different scheduling policies on created threads</title>
    <link href="https://benedict-cs.github.io/hexo-en/2024/11/13/linux_scheduling_policies/"/>
    <id>https://benedict-cs.github.io/hexo-en/2024/11/13/linux_scheduling_policies/</id>
    <published>2024-11-12T22:40:12.000Z</published>
    <updated>2024-07-03T03:38:15.071Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Assignment 2: Implement a program to apply different scheduling policies on created threads<ul><li>Linux Scheduling Policy<ul><li><code>SCHED_FIFO</code></li></ul></li><li>Requirements<ul><li>Main thread</li><li>Worker Thread</li></ul></li></ul></li></ul><h2 id="Implement-a-program-to-apply-different-scheduling-policies-on-created-threads"><a href="#Implement-a-program-to-apply-different-scheduling-policies-on-created-threads" class="headerlink" title="Implement a program to apply different scheduling policies on created threads"></a>Implement a program to apply different scheduling policies on created threads</h2><h3 id="Q1-Describe-how-you-implemented-the-program-in-detail"><a href="#Q1-Describe-how-you-implemented-the-program-in-detail" class="headerlink" title="Q1: Describe how you implemented the program in detail."></a>Q1: Describe how you implemented the program in detail.</h3><p><strong>Step 0: Create new program</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim sched_demo_312551002.c</span><br></pre></td></tr></table></figure><p><strong>Step 1: Define and include related library</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br></pre></td></tr></table></figure><p>I enabled the GNU extensions because I’ll using functions like <code>CPU_ZERO</code>, <code>CPU_SET</code>, and <code>pthread_setaffinity_np</code>, if not enabled the GNU extensions, when compile will occur errors and warnings. </p><p><strong>Step 2: Define a struct for collecting required thread information</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">pthread_t</span> thread_id;</span><br><span class="line">    <span class="type">int</span> thread_num;</span><br><span class="line">    <span class="type">int</span> sched_policy;</span><br><span class="line">    <span class="type">int</span> sched_priority;</span><br><span class="line">    <span class="type">pthread_barrier_t</span> *barrier;</span><br><span class="line">    <span class="type">double</span> time_wait;</span><br><span class="line">&#125; <span class="type">thread_info_t</span>;</span><br></pre></td></tr></table></figure><p><strong>Step 3: Implement the Parse program arguments</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">testcases:</span><br><span class="line"></span><br><span class="line">-n 1 -t 0.5 -s NORMAL -p -1</span><br><span class="line">-n 2 -t 0.5 -s FIFO,FIFO -p 10,20</span><br><span class="line">-n 3 -t 1.0 -s NORMAL,FIFO,FIFO -p -1,10,30</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">parse_args</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[], <span class="type">int</span> *num_threads, <span class="type">double</span> *time_wait, </span></span><br><span class="line"><span class="params">                <span class="type">char</span> ***policies_array, <span class="type">char</span> ***priorities_array)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *policies_str = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">char</span> *priorities_str = <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* Parse program arguments */</span></span><br><span class="line">    <span class="type">int</span> opt;</span><br><span class="line">    <span class="keyword">while</span> ((opt = getopt(argc, argv, <span class="string">&quot;n:t:s:p:&quot;</span>)) != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (opt) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;n&#x27;</span>:</span><br><span class="line">                *num_threads = atoi(optarg);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;t&#x27;</span>:</span><br><span class="line">                *time_wait = atof(optarg);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">                policies_str = optarg;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;p&#x27;</span>:</span><br><span class="line">                priorities_str = optarg;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Split policies and priotities argument */</span></span><br><span class="line">    *policies_array = <span class="built_in">malloc</span>(*num_threads * <span class="keyword">sizeof</span>(<span class="type">char</span> *));</span><br><span class="line">    *priorities_array = <span class="built_in">malloc</span>(*num_threads * <span class="keyword">sizeof</span>(<span class="type">char</span> *));</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> *rest_policy = policies_str;</span><br><span class="line">    <span class="type">char</span> *rest_priority = priorities_str;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; *num_threads; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">            (*policies_array)[i] = strtok_r(policies_str, <span class="string">&quot;,&quot;</span>, &amp;rest_policy);</span><br><span class="line">            (*priorities_array)[i] = strtok_r(priorities_str, <span class="string">&quot;,&quot;</span>, &amp;rest_priority);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            (*policies_array)[i] = strtok_r(<span class="literal">NULL</span>, <span class="string">&quot;,&quot;</span>, &amp;rest_policy);</span><br><span class="line">            (*priorities_array)[i] = strtok_r(<span class="literal">NULL</span>, <span class="string">&quot;,&quot;</span>, &amp;rest_priority);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Command-line arguments are parsed using the <code>getopt</code> function. The arguments include the number of threads <code>-n</code>, time to wait <code>-t</code>, scheduling policies <code>-s</code>, and priorities <code>-p</code>. The values are stored in appropriate variables for later use.</li><li>Special attention is given to the <code>-s</code> and <code>-p</code> arguments, which can have multiple values separated by <code>&quot;,&quot;</code>. These values are split and stored in arrays for individual thread configurations.</li></ul><p><strong>Step 4: Set CPU affinity and thread attribute</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">set_thread_attributes</span><span class="params">(<span class="type">pthread_attr_t</span> *attr, <span class="type">int</span> sched_policy, <span class="type">int</span> sched_priority)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* Set CPU affinity */</span></span><br><span class="line">    <span class="type">cpu_set_t</span> cpuset;</span><br><span class="line">    pthread_attr_init(attr);</span><br><span class="line">    CPU_ZERO(&amp;cpuset);</span><br><span class="line">    CPU_SET(<span class="number">0</span>, &amp;cpuset);</span><br><span class="line">    pthread_attr_setaffinity_np(attr, <span class="keyword">sizeof</span>(<span class="type">cpu_set_t</span>), &amp;cpuset);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Set FIFO priority and attribute */</span></span><br><span class="line">    <span class="keyword">if</span> (sched_policy == SCHED_FIFO) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">sched_param</span> <span class="title">param</span>;</span></span><br><span class="line">        param.sched_priority = sched_priority;</span><br><span class="line">        pthread_attr_setschedpolicy(attr, SCHED_FIFO);</span><br><span class="line">        pthread_attr_setschedparam(attr, &amp;param);</span><br><span class="line">        pthread_attr_setinheritsched(attr, PTHREAD_EXPLICIT_SCHED);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>CPU_ZERO</code> and <code>CPU_SET</code> are used to bind threads to a specific CPU (CPU 0 in this case), ensuring that they run on the designated processor.</li><li>If the scheduling policy is <code>SCHED_FIFO</code>, additional attributes such as scheduling policy and priority are set. <code>SCHED_FIFO</code> is a real-time scheduling policy where a thread runs until it either finishes or is preempted by a higher priority thread. If scheduling policy is <code>NORMAL</code> will skip this part.</li></ul><p><strong>Step 5: Implement the Worker Thread</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">thread_func</span><span class="params">(<span class="type">void</span> *arg)</span> &#123;</span><br><span class="line">    <span class="type">thread_info_t</span> *tinfo = (<span class="type">thread_info_t</span> *)arg;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timespec</span> <span class="title">start</span>, <span class="title">current</span>;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* Wait until all threads are ready */</span></span><br><span class="line">    pthread_barrier_wait(tinfo-&gt;barrier);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Do the task */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Thread %d is running\n&quot;</span>, tinfo-&gt;thread_num);</span><br><span class="line">        clock_gettime(CLOCK_MONOTONIC, &amp;start);</span><br><span class="line">        <span class="type">double</span> elapsed = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Busy for &lt;time_wait&gt; seconds */</span></span><br><span class="line">        <span class="keyword">while</span> (elapsed &lt; tinfo-&gt;time_wait) &#123;</span><br><span class="line">            clock_gettime(CLOCK_MONOTONIC, &amp;current);</span><br><span class="line">            elapsed = current.tv_sec - start.tv_sec + </span><br><span class="line">                     (current.tv_nsec - start.tv_nsec) / <span class="number">1000000000.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Exit the function  */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>The worker thread’s function is defined here. Each thread waits at the barrier until all threads are ready to start simultaneously. This ensures synchronized start across all threads.</li><li>Inside the loop, each thread performs its task for a specified duration <code>time_wait</code>. This is achieved using a busy-wait loop, calculating elapsed time with <code>clock_gettime</code>.</li></ul><p><strong>Step 6: Implement the Main Thread</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* Parse program arguments */</span></span><br><span class="line">    <span class="type">int</span> num_threads;</span><br><span class="line">    <span class="type">double</span> time_wait;</span><br><span class="line">    <span class="type">char</span> **policies;</span><br><span class="line">    <span class="type">char</span> **priorities;</span><br><span class="line"></span><br><span class="line">    parse_args(argc, argv, &amp;num_threads, &amp;time_wait, &amp;policies, &amp;priorities);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Initialize a barrier for synchronizing the start of the worker threads */</span></span><br><span class="line">    <span class="type">pthread_barrier_t</span> barrier;</span><br><span class="line">    pthread_barrier_init(&amp;barrier, <span class="literal">NULL</span>, num_threads);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Allocate memory for storing thread information */</span></span><br><span class="line">    <span class="type">thread_info_t</span> *tinfo = <span class="built_in">calloc</span>(num_threads, <span class="keyword">sizeof</span>(*tinfo));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Create &lt;num_threads&gt; worker threads */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num_threads; i++) &#123;</span><br><span class="line">        tinfo[i].thread_num = i;</span><br><span class="line">        tinfo[i].time_wait = time_wait;</span><br><span class="line">        tinfo[i].barrier = &amp;barrier;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* Set thread scheduling policy and priority */</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(policies[i], <span class="string">&quot;FIFO&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">            tinfo[i].sched_policy = SCHED_FIFO;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            tinfo[i].sched_policy = SCHED_OTHER;</span><br><span class="line">        </span><br><span class="line">        tinfo[i].sched_priority = atoi(priorities[i]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Set attributes to each thread, including CPU affinity and scheduling */</span></span><br><span class="line">        <span class="type">pthread_attr_t</span> attr;</span><br><span class="line">        set_thread_attributes(&amp;attr, tinfo[i].sched_policy, tinfo[i].sched_priority);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* Start the thread */</span></span><br><span class="line">        pthread_create(&amp;tinfo[i].thread_id, &amp;attr, thread_func, &amp;tinfo[i]);</span><br><span class="line">        pthread_attr_destroy(&amp;attr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Wait for all threads to finish */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num_threads; i++) &#123;</span><br><span class="line">        pthread_join(tinfo[i].thread_id, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Clean up */</span></span><br><span class="line">    pthread_barrier_destroy(&amp;barrier);</span><br><span class="line">    <span class="built_in">free</span>(tinfo);</span><br><span class="line">    <span class="built_in">free</span>(policies);</span><br><span class="line">    <span class="built_in">free</span>(priorities);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>The main function initializes the threading environment and starts the worker threads.</li><li>It begins by parsing command-line arguments to determine the number of threads, their wait times, scheduling policies, and priorities.</li><li>A barrier is initialized to synchronize the start of all worker threads.</li><li>Threads are created in a loop. Each thread is given a unique number, its wait time, a reference to the barrier, and its scheduling policy and priority.</li><li>Thread attributes are set according to the specified scheduling policy and CPU affinity.</li><li>Threads are then started with <code>pthread_create</code>.</li><li>Finally, the main thread waits for all worker threads to complete using <code>pthread_join</code> and performs necessary cleanup operations like destroying the barrier and freeing allocated memory.</li></ul><p><strong>Complete sched_demo_312551002.c program like below:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">pthread_t</span> thread_id;</span><br><span class="line">    <span class="type">int</span> thread_num;</span><br><span class="line">    <span class="type">int</span> sched_policy;</span><br><span class="line">    <span class="type">int</span> sched_priority;</span><br><span class="line">    <span class="type">pthread_barrier_t</span> *barrier;</span><br><span class="line">    <span class="type">double</span> time_wait;</span><br><span class="line">&#125; <span class="type">thread_info_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">parse_args</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[], <span class="type">int</span> *num_threads, <span class="type">double</span> *time_wait, </span></span><br><span class="line"><span class="params">                <span class="type">char</span> ***policies_array, <span class="type">char</span> ***priorities_array)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *policies_str = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">char</span> *priorities_str = <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* Parse program arguments */</span></span><br><span class="line">    <span class="type">int</span> opt;</span><br><span class="line">    <span class="keyword">while</span> ((opt = getopt(argc, argv, <span class="string">&quot;n:t:s:p:&quot;</span>)) != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (opt) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;n&#x27;</span>:</span><br><span class="line">                *num_threads = atoi(optarg);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;t&#x27;</span>:</span><br><span class="line">                *time_wait = atof(optarg);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">                policies_str = optarg;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;p&#x27;</span>:</span><br><span class="line">                priorities_str = optarg;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Split policies and priotities argument */</span></span><br><span class="line">    *policies_array = <span class="built_in">malloc</span>(*num_threads * <span class="keyword">sizeof</span>(<span class="type">char</span> *));</span><br><span class="line">    *priorities_array = <span class="built_in">malloc</span>(*num_threads * <span class="keyword">sizeof</span>(<span class="type">char</span> *));</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> *rest_policy = policies_str;</span><br><span class="line">    <span class="type">char</span> *rest_priority = priorities_str;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; *num_threads; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">            (*policies_array)[i] = strtok_r(policies_str, <span class="string">&quot;,&quot;</span>, &amp;rest_policy);</span><br><span class="line">            (*priorities_array)[i] = strtok_r(priorities_str, <span class="string">&quot;,&quot;</span>, &amp;rest_priority);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            (*policies_array)[i] = strtok_r(<span class="literal">NULL</span>, <span class="string">&quot;,&quot;</span>, &amp;rest_policy);</span><br><span class="line">            (*priorities_array)[i] = strtok_r(<span class="literal">NULL</span>, <span class="string">&quot;,&quot;</span>, &amp;rest_priority);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">set_thread_attributes</span><span class="params">(<span class="type">pthread_attr_t</span> *attr, <span class="type">int</span> sched_policy, <span class="type">int</span> sched_priority)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* Set CPU affinity */</span></span><br><span class="line">    <span class="type">cpu_set_t</span> cpuset;</span><br><span class="line">    pthread_attr_init(attr);</span><br><span class="line">    CPU_ZERO(&amp;cpuset);</span><br><span class="line">    CPU_SET(<span class="number">0</span>, &amp;cpuset);</span><br><span class="line">    pthread_attr_setaffinity_np(attr, <span class="keyword">sizeof</span>(<span class="type">cpu_set_t</span>), &amp;cpuset);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Set FIFO priority and attribute */</span></span><br><span class="line">    <span class="keyword">if</span> (sched_policy == SCHED_FIFO) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">sched_param</span> <span class="title">param</span>;</span></span><br><span class="line">        param.sched_priority = sched_priority;</span><br><span class="line">        pthread_attr_setschedpolicy(attr, SCHED_FIFO);</span><br><span class="line">        pthread_attr_setschedparam(attr, &amp;param);</span><br><span class="line">        pthread_attr_setinheritsched(attr, PTHREAD_EXPLICIT_SCHED);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">thread_func</span><span class="params">(<span class="type">void</span> *arg)</span> &#123;</span><br><span class="line">    <span class="type">thread_info_t</span> *tinfo = (<span class="type">thread_info_t</span> *)arg;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timespec</span> <span class="title">start</span>, <span class="title">current</span>;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* Wait until all threads are ready */</span></span><br><span class="line">    pthread_barrier_wait(tinfo-&gt;barrier);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Do the task */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Thread %d is running\n&quot;</span>, tinfo-&gt;thread_num);</span><br><span class="line">        clock_gettime(CLOCK_MONOTONIC, &amp;start);</span><br><span class="line">        <span class="type">double</span> elapsed = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Busy for &lt;time_wait&gt; seconds */</span></span><br><span class="line">        <span class="keyword">while</span> (elapsed &lt; tinfo-&gt;time_wait) &#123;</span><br><span class="line">            clock_gettime(CLOCK_MONOTONIC, &amp;current);</span><br><span class="line">            elapsed = current.tv_sec - start.tv_sec + </span><br><span class="line">                     (current.tv_nsec - start.tv_nsec) / <span class="number">1000000000.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Exit the function  */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* Parse program arguments */</span></span><br><span class="line">    <span class="type">int</span> num_threads;</span><br><span class="line">    <span class="type">double</span> time_wait;</span><br><span class="line">    <span class="type">char</span> **policies;</span><br><span class="line">    <span class="type">char</span> **priorities;</span><br><span class="line"></span><br><span class="line">    parse_args(argc, argv, &amp;num_threads, &amp;time_wait, &amp;policies, &amp;priorities);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Initialize a barrier for synchronizing the start of the worker threads */</span></span><br><span class="line">    <span class="type">pthread_barrier_t</span> barrier;</span><br><span class="line">    pthread_barrier_init(&amp;barrier, <span class="literal">NULL</span>, num_threads);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Allocate memory for storing thread information */</span></span><br><span class="line">    <span class="type">thread_info_t</span> *tinfo = <span class="built_in">calloc</span>(num_threads, <span class="keyword">sizeof</span>(*tinfo));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Create &lt;num_threads&gt; worker threads */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num_threads; i++) &#123;</span><br><span class="line">        tinfo[i].thread_num = i;</span><br><span class="line">        tinfo[i].time_wait = time_wait;</span><br><span class="line">        tinfo[i].barrier = &amp;barrier;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* Set thread scheduling policy and priority */</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(policies[i], <span class="string">&quot;FIFO&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">            tinfo[i].sched_policy = SCHED_FIFO;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            tinfo[i].sched_policy = SCHED_OTHER;</span><br><span class="line">        </span><br><span class="line">        tinfo[i].sched_priority = atoi(priorities[i]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Set attributes to each thread, including CPU affinity and scheduling */</span></span><br><span class="line">        <span class="type">pthread_attr_t</span> attr;</span><br><span class="line">        set_thread_attributes(&amp;attr, tinfo[i].sched_policy, tinfo[i].sched_priority);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* Start the thread */</span></span><br><span class="line">        pthread_create(&amp;tinfo[i].thread_id, &amp;attr, thread_func, &amp;tinfo[i]);</span><br><span class="line">        pthread_attr_destroy(&amp;attr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Wait for all threads to finish */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num_threads; i++) &#123;</span><br><span class="line">        pthread_join(tinfo[i].thread_id, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Clean up */</span></span><br><span class="line">    pthread_barrier_destroy(&amp;barrier);</span><br><span class="line">    <span class="built_in">free</span>(tinfo);</span><br><span class="line">    <span class="built_in">free</span>(policies);</span><br><span class="line">    <span class="built_in">free</span>(priorities);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Compile implemented program</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -o sched_demo_312551002 sched_demo_312551002.c</span><br></pre></td></tr></table></figure><p><strong>Test the program</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./sched_test.sh ./sched_demo ./sched_demo_312551002</span><br></pre></td></tr></table></figure><p><strong>Screenshot of test result:</strong><br>   <div><br>                                                <img alt="張永義 競賽圖片" data-src="/hexo/images/OS_2/OS_1.png" /><br>                                            </div></p><h3 id="Q2-Describe-the-results-of-sched-demo-n-3-t-1-0-s-NORMAL-FIFO-FIFO-p-1-10-30-and-what-causes-that"><a href="#Q2-Describe-the-results-of-sched-demo-n-3-t-1-0-s-NORMAL-FIFO-FIFO-p-1-10-30-and-what-causes-that" class="headerlink" title="Q2: Describe the results of .&#x2F;sched_demo -n 3 -t 1.0 -s NORMAL,FIFO,FIFO -p -1,10,30 and what causes that."></a>Q2: Describe the results of .&#x2F;sched_demo -n 3 -t 1.0 -s NORMAL,FIFO,FIFO -p -1,10,30 and what causes that.</h3>   <div>                                                <img alt="張永義 競賽圖片" data-src="/hexo/images/OS_2/OS_2.png" />                                            </div><ul><li><strong>CFS and NORMAL Policy:</strong> Thread 0 and Thread 2, which are both scheduled under the NORMAL policy, are managed by the CFS. This ensures they receive fair CPU time slices. Despite their lower priority compared to the FIFO threads, CFS allocates them CPU time in a manner that prevents starvation and ensures fair allocation. This is why these threads are scheduled intermittently even amidst the higher priority FIFO threads.</li><li><strong>FIFO Policy and Preemption:</strong> Threads 1 and 3, scheduled under the FIFO policy, are expected to run based on their priority levels. Thread 3, with the highest priority (30), should theoretically preempt other threads and run to completion first. However, the interleaved scheduling of Thread 0 and Thread 2 indicates that CFS intervention allows these NORMAL policy threads to receive CPU time, thus not strictly adhering to FIFO priorities.</li></ul><h3 id="Q3-Describe-the-results-of-sched-demo-n-4-t-0-5-s-NORMAL-FIFO-NORMAL-FIFO-p-1-10-1-30-and-what-causes-that"><a href="#Q3-Describe-the-results-of-sched-demo-n-4-t-0-5-s-NORMAL-FIFO-NORMAL-FIFO-p-1-10-1-30-and-what-causes-that" class="headerlink" title="Q3: Describe the results of .&#x2F;sched_demo -n 4 -t 0.5 -s NORMAL,FIFO,NORMAL,FIFO -p -1,10,-1,30, and what causes that."></a>Q3: Describe the results of .&#x2F;sched_demo -n 4 -t 0.5 -s NORMAL,FIFO,NORMAL,FIFO -p -1,10,-1,30, and what causes that.</h3>   <div>                                                <img alt="張永義 競賽圖片" data-src="/hexo/images/OS_2/OS_3.png" />                                            </div><ul><li><strong>CFS and NORMAL Policy:</strong> Although Thread 0 and Thread 2 have a NORMAL scheduling policy, the CFS ensures they both receive a fair portion of CPU time. CFS is designed to equitably distribute CPU time slices and does not allow real-time processes to completely overshadow regular ones. This design accounts for why Threads 0 and 2 are scheduled intermittently, even though there are FIFO threads with higher priorities running.</li><li><strong>FIFO Policy and Preemption:</strong> For FIFO threads such as Thread 1 and Thread 3, the scheduling is based on their priority levels. Thread 3, with the highest priority (30), should, in a perfect FIFO system, run to completion before Thread 1, which has a lower priority (10), begins. However, the interleaving of Thread 0 and Thread 2 suggests that CFS is providing time slices to NORMAL policy threads, thereby not strictly adhering to FIFO priority rules.</li></ul><h3 id="Q4-Describe-how-did-you-implement-n-second-busy-waiting"><a href="#Q4-Describe-how-did-you-implement-n-second-busy-waiting" class="headerlink" title="Q4: Describe how did you implement n-second-busy-waiting?"></a>Q4: Describe how did you implement n-second-busy-waiting?</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">thread_func</span><span class="params">(<span class="type">void</span> *arg)</span> &#123;</span><br><span class="line">    <span class="type">thread_info_t</span> *tinfo = (<span class="type">thread_info_t</span> *)arg;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timespec</span> <span class="title">start</span>, <span class="title">current</span>;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* Wait until all threads are ready */</span></span><br><span class="line">    pthread_barrier_wait(tinfo-&gt;barrier);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Do the task */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Thread %d is running\n&quot;</span>, tinfo-&gt;thread_num);</span><br><span class="line">        clock_gettime(CLOCK_MONOTONIC, &amp;start);</span><br><span class="line">        <span class="type">double</span> elapsed = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Busy for &lt;time_wait&gt; seconds */</span></span><br><span class="line">        <span class="keyword">while</span> (elapsed &lt; tinfo-&gt;time_wait) &#123;</span><br><span class="line">            clock_gettime(CLOCK_MONOTONIC, &amp;current);</span><br><span class="line">            elapsed = current.tv_sec - start.tv_sec + </span><br><span class="line">                     (current.tv_nsec - start.tv_nsec) / <span class="number">1000000000.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Exit the function  */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>Time Measurement:</strong> The <code>clock_gettime</code> function with <code>CLOCK_MONOTONIC</code> is used to retrieve the current time at the start of the busy-waiting loop and then repeatedly during the loop to measure the elapsed time.</li><li><strong>Busy-Wait Loop:</strong> Each thread enters a while loop that continually checks whether the elapsed time since the start of the loop has exceeded the specified waiting time (time_wait).</li><li><strong>Elapsed Time Calculation:</strong> Inside the loop, clock_gettime is called again to get the current time, and the elapsed time is calculated by subtracting the starting time (start) from the current time (current). The result includes both the seconds (tv_sec) and nanoseconds (tv_nsec) components.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;Assignment 2: Implement a program to apply different scheduling policies on created threads&lt;ul&gt;
&lt;li&gt;Linux Scheduling Policy&lt;ul&gt;
&lt;li</summary>
      
    
    
    
    <category term="OS" scheme="https://benedict-cs.github.io/hexo-en/categories/OS/"/>
    
    
    <category term="OS" scheme="https://benedict-cs.github.io/hexo-en/tags/OS/"/>
    
    <category term="Linux Kernel" scheme="https://benedict-cs.github.io/hexo-en/tags/Linux-Kernel/"/>
    
  </entry>
  
  <entry>
    <title>Compiling Linux Kernel and Add Custom System Calls</title>
    <link href="https://benedict-cs.github.io/hexo-en/2024/11/12/compile_linux_kernel/"/>
    <id>https://benedict-cs.github.io/hexo-en/2024/11/12/compile_linux_kernel/</id>
    <published>2024-11-11T22:40:12.000Z</published>
    <updated>2024-07-03T03:36:46.895Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Assignment 1: Compiling Linux Kernel and Adding Custom System Calls<ul><li>Compiling Linux Kernel<ul><li><code>Change kernel suffix</code></li></ul></li><li>Adding custom system calls<ul><li><code>sys_hello</code></li><li><code>sys_revstr</code></li></ul></li></ul></li></ul><h2 id="Part-1-Compiling-Linux-Kernel-Change-kernel-suffix"><a href="#Part-1-Compiling-Linux-Kernel-Change-kernel-suffix" class="headerlink" title="Part 1: Compiling Linux Kernel &amp; Change kernel suffix"></a>Part 1: Compiling Linux Kernel &amp; Change kernel suffix</h2><p><strong>Step 1: Download and Extract the Linux kernel source code</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.19.12.tar.xz</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xJf linux-5.19.12.tar.xz</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd linux-5.19.12</span><br></pre></td></tr></table></figure><p><strong>Step 2: Install essential tools and libraries required for compiling the kernel</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br><span class="line">sudo apt-get install flex</span><br><span class="line">sudo apt-get install bison</span><br><span class="line">sudo apt install build-essential</span><br><span class="line">sudo apt install libelf-dev libssl-dev</span><br><span class="line">sudo apt-get install libncurses5-dev gcc make git exuberant-ctags bc libssl-dev</span><br></pre></td></tr></table></figure><p><strong>Step 3: Copy current kernel config file, then set it as default configuration</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /boot/config-`uname -r`* .config</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make defconfig</span><br></pre></td></tr></table></figure><p><strong>Step 4: Modify the config file</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim .config</span><br></pre></td></tr></table></figure><p>Find <code>CONFIG_LOCALVERSION</code> change value to <code>-os-312551002</code></p><p><strong>Step 5: Compile the kernel (wait 20~50 mins)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make -j4</span><br></pre></td></tr></table></figure><p><strong>Step 6: Install the kernel modules</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make modules_install install</span><br></pre></td></tr></table></figure><p><strong>Step 7: Update GRUB, the bootloader</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-grub2</span><br></pre></td></tr></table></figure><p><strong>Step 8: Reboot the system</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><p>Press <strong>Esc</strong> button when system boot &gt; Advanced options for Ubuntu &gt; choose <code>Linux 5.19.12-os-312551002</code> to start</p><p><strong>Step 9: Check the running kernel version</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -a</span><br></pre></td></tr></table></figure><p><strong>The screenshot of changed kernel suffix</strong><br>       <div><br>                                            <img alt="張永義 競賽圖片" data-src="/hexo/images/OS_1/OS_1.png" /><br>                                        </div></p><h2 id="Part-2-Adding-custom-system-calls"><a href="#Part-2-Adding-custom-system-calls" class="headerlink" title="Part 2: Adding custom system calls"></a>Part 2: Adding custom system calls</h2><h3 id="sys-hello"><a href="#sys-hello" class="headerlink" title="sys_hello"></a><code>sys_hello</code></h3><p>For the implementation of the sys_hello system calls, I <font color="#f00">modified 4 kernel source files</font> and <font color="#f00">added 1 new C code</font> to verify if the system calls work correctly. The modified and added files are:</p><ol><li>linux-5.19.12&#x2F;kernel&#x2F;<font color="#f00">sys.c</font></li><li>linux-5.19.12&#x2F;arch&#x2F;x86&#x2F;include&#x2F;generated&#x2F;uapi&#x2F;asm&#x2F;<font color="#f00">unistd_64.h</font></li><li>linux-5.19.12&#x2F;arch&#x2F;x86&#x2F;entry&#x2F;syscalls&#x2F;<font color="#f00">syscall_64.tbl</font></li><li>linux-5.19.12&#x2F;include&#x2F;linux&#x2F;<font color="#f00">syscalls.h</font></li><li><font color="#f00">sys_hello.c</font></li></ol><p><strong>Step 1: In the sys.c file, add the following code to defines a new system call named “hello”.</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SYSCALL_DEFINE0(hello)&#123;</span><br><span class="line">printk(KERN_INFO <span class="string">&quot;Hello, world! \n&quot;</span>);</span><br><span class="line">printk(KERN_INFO <span class="string">&quot;312551002 \n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Step 2: In the unistd_64.h file, add the following code to defines the system call number for “hello”.</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define __NR_hello 548</span><br></pre></td></tr></table></figure><p><strong>Step 3: In the syscall_64.tbl file, add the following entry to map system call number to its corresponding function.</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">548commonhellosys_hello</span><br></pre></td></tr></table></figure><p><strong>Step 4: In the syscalls.h file, add the following code to add the new system call in the header file.</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">asmlinkage long sys_hello(void);</span><br></pre></td></tr></table></figure><p><strong>Step 5: Create new C code file named sys_hello.c and add the following code:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_hello 548</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    <span class="type">int</span> ret = syscall(__NR_hello);</span><br><span class="line">    assert(ret == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Step 6: Rebuild the kernel to compile the modified kernel source code.</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p><strong>Step 7: Reinstall the kernel</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make modules_install install</span><br></pre></td></tr></table></figure><p><strong>Step 8: Reboot the kernel</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><p><strong>Step 9: Compile the sys_hello.c file to test if the system call operates correctly.</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc sys_hello.c -o sys_hello</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./sys_hello</span><br></pre></td></tr></table></figure><p><strong>Step 10: Display the output messages produced by the sys_hello system call.</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dmesg | tail</span><br></pre></td></tr></table></figure><p><strong>The screenshot of the results of executing sys_hello system call:</strong><br>       <div><br>                                            <img alt="張永義 競賽圖片" data-src="/hexo/images/OS_1/OS_2.jpg" /><br>                                        </div></p><h3 id="sys-revstr"><a href="#sys-revstr" class="headerlink" title="sys_revstr"></a><code>sys_revstr</code></h3><p>For the implementation of the sys_hello system calls, I <font color="#f00">modified 4 kernel source files</font> and <font color="#f00">added 1 new C code</font> to verify if the system calls work correctly. The modified and added files are:</p><ol><li>linux-5.19.12&#x2F;kernel&#x2F;<font color="#f00">sys.c</font></li><li>linux-5.19.12&#x2F;arch&#x2F;x86&#x2F;include&#x2F;generated&#x2F;uapi&#x2F;asm&#x2F;<font color="#f00">unistd_64.h</font></li><li>linux-5.19.12&#x2F;arch&#x2F;x86&#x2F;entry&#x2F;syscalls&#x2F;<font color="#f00">syscall_64.tbl</font></li><li>linux-5.19.12&#x2F;include&#x2F;linux&#x2F;<font color="#f00">syscalls.h</font></li><li><font color="#f00">sys_revstr.c</font></li></ol><p><strong>Step 1: In the sys.c file, add the following code to defines a new system call named “revstr”.</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">SYSCALL_DEFINE2(revstr, <span class="type">int</span>, len, <span class="type">char</span> __user *, usr_str) &#123;</span><br><span class="line">    <span class="type">char</span> k_str[<span class="number">256</span>];</span><br><span class="line">    <span class="type">char</span> k_revstr[<span class="number">256</span>];</span><br><span class="line">    <span class="type">int</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> end = len - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(len &gt;= <span class="keyword">sizeof</span>(k_str))</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line">    <span class="keyword">if</span>(copy_from_user(k_str, usr_str, len))</span><br><span class="line">        <span class="keyword">return</span> -EFAULT;</span><br><span class="line"></span><br><span class="line">    k_str[len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    printk(KERN_INFO <span class="string">&quot;The origin string: %s&quot;</span>, k_str);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(start &lt; end) &#123;</span><br><span class="line">        <span class="type">char</span> temp = k_str[start];</span><br><span class="line">        k_str[start] = k_str[end];</span><br><span class="line">        k_str[end] = temp;</span><br><span class="line">        start++;</span><br><span class="line">        end--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strncpy</span>(k_revstr, k_str, <span class="keyword">sizeof</span>(k_str));</span><br><span class="line">    printk(KERN_INFO <span class="string">&quot;The reversed string: %s&quot;</span>, k_revstr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Step 2: In the unistd_64.h file, add the following code to defines the system call number for “revstr”.</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define __NR_revstr 549</span><br></pre></td></tr></table></figure><p><strong>Step 3: In the syscall_64.tbl file, add the following entry to map system call number to its corresponding function.</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">549commonrevstrsys_revstr</span><br></pre></td></tr></table></figure><p><strong>Step 4: In the syscalls.h file, add the following code to add the new system call in the header file.</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">asmlinkage long sys_revstr(int len, char __user *usr_str);</span><br></pre></td></tr></table></figure><p><strong>Step 5: Create new C code file named sys_revstr.c and add the following code:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;assert.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;sys/syscall.h&gt;</span><br><span class="line"></span><br><span class="line">#define __NR_revstr 549</span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[]) &#123;  </span><br><span class="line">    int ret1 = syscall(__NR_revstr, 5, &quot;hello&quot;);</span><br><span class="line">    assert(ret1 == 0);</span><br><span class="line"></span><br><span class="line">    int ret2 = syscall(__NR_revstr, 11, &quot;5Y573M C411&quot;);</span><br><span class="line">    assert(ret2 == 0);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Step 6: Rebuild the kernel to compile the modified kernel source code.</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p><strong>Step 7: Reinstall the kernel</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make modules_install install</span><br></pre></td></tr></table></figure><p><strong>Step 8: Reboot the kernel</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><p><strong>Step 9: Compile the sys_revstr.c file to test if the system call operates correctly.</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc sys_revstr.c -o sys_revstr</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./sys_revstr</span><br></pre></td></tr></table></figure><p><strong>Step 10: Display the output messages produced by the sys_ revstr system call.</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dmesg | tail</span><br></pre></td></tr></table></figure><p><strong>The screenshot of the results of executing sys_ revstr system call:</strong><br>       <div><br>                                            <img alt="張永義 競賽圖片" data-src="/hexo/images/OS_1/OS_3.png" /><br>                                        </div></p>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;Assignment 1: Compiling Linux Kernel and Adding Custom System Calls&lt;ul&gt;
&lt;li&gt;Compiling Linux Kernel&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Change kernel suff</summary>
      
    
    
    
    <category term="OS" scheme="https://benedict-cs.github.io/hexo-en/categories/OS/"/>
    
    
    <category term="OS" scheme="https://benedict-cs.github.io/hexo-en/tags/OS/"/>
    
    <category term="Linux Kernel" scheme="https://benedict-cs.github.io/hexo-en/tags/Linux-Kernel/"/>
    
  </entry>
  
</feed>
