<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Benedict</title>
  
  
  <link href="https://benedict-cs.github.io/hexo/atom.xml" rel="self"/>
  
  <link href="https://benedict-cs.github.io/hexo/"/>
  <updated>2024-07-03T03:39:39.699Z</updated>
  <id>https://benedict-cs.github.io/hexo/</id>
  
  <author>
    <name>Benedict</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>System Information Fetching Kernel Module</title>
    <link href="https://benedict-cs.github.io/hexo/2024/11/14/kernel_module/"/>
    <id>https://benedict-cs.github.io/hexo/2024/11/14/kernel_module/</id>
    <published>2024-11-13T22:40:12.000Z</published>
    <updated>2024-07-03T03:39:39.699Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Assignment 3: System Information Fetching Kernel Module<ul><li>Linux Kernel Module</li><li>Descriptions</li><li>Kernel Module: kfetch_mod<ul><li>Kfetch information mask</li><li>Device operations</li></ul></li><li>Requirements<ul><li>Default logo</li></ul></li></ul></li></ul><p>In this assignment, you are going to implement a kernel module that fetches the system information from the kernel, like below screenshot:</p>   <div>                                                    <img alt="張永義 競賽圖片" data-src="/hexo/images/OS_3/OS_1.png" />                                                </div><h2 id="Implement-a-kernel-module-fetches-system-info-from-kernel"><a href="#Implement-a-kernel-module-fetches-system-info-from-kernel" class="headerlink" title="Implement a kernel module fetches system info from kernel"></a>Implement a kernel module fetches system info from kernel</h2><p><strong>Step 0: Create new program</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim kfetch_mod_312551002.c</span><br></pre></td></tr></table></figure><p><strong>Step 1: Implement the fetches system information function</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/cdev.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/uaccess.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/mm.h&gt;</span>       <span class="comment">// For si_meminfo</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/utsname.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/timekeeping.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/sched/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/cpu.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/sched/signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/utsname.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEVICE_NAME <span class="string">&quot;kfetch_mod_312551002&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CLASS_NAME <span class="string">&quot;kfetch&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFER_SIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Information mask definitions</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KFETCH_NUM_INFO 6</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KFETCH_RELEASE   (1 &lt;&lt; 0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KFETCH_NUM_CPUS  (1 &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KFETCH_CPU_MODEL (1 &lt;&lt; 2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KFETCH_MEM       (1 &lt;&lt; 3)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KFETCH_UPTIME    (1 &lt;&lt; 4)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KFETCH_NUM_PROCS (1 &lt;&lt; 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KFETCH_FULL_INFO ((1 &lt;&lt; KFETCH_NUM_INFO) - 1)</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> majorNumber;</span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="keyword">class</span> *<span class="title">kfetchClass</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">cdev</span> <span class="title">kfetchCdev</span>;</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> mask_info = KFETCH_FULL_INFO;</span><br><span class="line"><span class="type">static</span> <span class="type">char</span> data_buffer[BUFFER_SIZE];</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">dev_open</span><span class="params">(<span class="keyword">struct</span> inode *, <span class="keyword">struct</span> file *)</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">ssize_t</span> <span class="title function_">dev_read</span><span class="params">(<span class="keyword">struct</span> file *, <span class="type">char</span> *, <span class="type">size_t</span>, <span class="type">loff_t</span> *)</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">ssize_t</span> <span class="title function_">dev_write</span><span class="params">(<span class="keyword">struct</span> file *, <span class="type">const</span> <span class="type">char</span> __user *, <span class="type">size_t</span>, <span class="type">loff_t</span> *)</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">dev_release</span><span class="params">(<span class="keyword">struct</span> inode *, <span class="keyword">struct</span> file *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">fops</span> =</span> &#123;</span><br><span class="line">    .open = dev_open,</span><br><span class="line">    .read = dev_read,</span><br><span class="line">    .write = dev_write,</span><br><span class="line">    .release = dev_release,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> __init <span class="title function_">kfetch_init</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    printk(KERN_INFO <span class="string">&quot;Kfetch: Initializing the Kfetch Module\n&quot;</span>);</span><br><span class="line">    majorNumber = register_chrdev(<span class="number">0</span>, DEVICE_NAME, &amp;fops);</span><br><span class="line">    <span class="keyword">if</span> (majorNumber &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(KERN_ALERT <span class="string">&quot;Kfetch failed to register a major number\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> majorNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(KERN_INFO <span class="string">&quot;Kfetch: Registered with major number %d\n&quot;</span>, majorNumber);</span><br><span class="line">    kfetchClass = class_create(THIS_MODULE, CLASS_NAME);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (IS_ERR(kfetchClass)) &#123;</span><br><span class="line">        unregister_chrdev(majorNumber, DEVICE_NAME);</span><br><span class="line">        printk(KERN_ALERT <span class="string">&quot;Failed to register device class\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> PTR_ERR(kfetchClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (IS_ERR(device_create(kfetchClass, <span class="literal">NULL</span>, MKDEV(majorNumber, <span class="number">0</span>), <span class="literal">NULL</span>, DEVICE_NAME))) &#123;</span><br><span class="line">        class_destroy(kfetchClass);</span><br><span class="line">        unregister_chrdev(majorNumber, DEVICE_NAME);</span><br><span class="line">        printk(KERN_ALERT <span class="string">&quot;Failed to create the device\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> PTR_ERR(device_create(kfetchClass, <span class="literal">NULL</span>, MKDEV(majorNumber, <span class="number">0</span>), <span class="literal">NULL</span>, DEVICE_NAME));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cdev_init(&amp;kfetchCdev, &amp;fops);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cdev_add(&amp;kfetchCdev, MKDEV(majorNumber, <span class="number">0</span>), <span class="number">1</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        device_destroy(kfetchClass, MKDEV(majorNumber, <span class="number">0</span>));</span><br><span class="line">        class_destroy(kfetchClass);</span><br><span class="line">        unregister_chrdev(majorNumber, DEVICE_NAME);</span><br><span class="line">        printk(KERN_ALERT <span class="string">&quot;Failed to add cdev\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(KERN_INFO <span class="string">&quot;Kfetch: Device class created correctly\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> __exit <span class="title function_">kfetch_exit</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    cdev_del(&amp;kfetchCdev);</span><br><span class="line">    device_destroy(kfetchClass, MKDEV(majorNumber, <span class="number">0</span>));</span><br><span class="line">    class_destroy(kfetchClass);</span><br><span class="line">    unregister_chrdev(majorNumber, DEVICE_NAME);</span><br><span class="line">    printk(KERN_INFO <span class="string">&quot;Kfetch: Module successfully unloaded\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">dev_open</span><span class="params">(<span class="keyword">struct</span> inode *inodep, <span class="keyword">struct</span> file *filep)</span> &#123;</span><br><span class="line">    printk(KERN_INFO <span class="string">&quot;Kfetch: Device has been opened\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">dev_release</span><span class="params">(<span class="keyword">struct</span> inode *inodep, <span class="keyword">struct</span> file *filep)</span> &#123;</span><br><span class="line">    printk(KERN_INFO <span class="string">&quot;Kfetch: Device successfully closed\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">ssize_t</span> <span class="title function_">dev_read</span><span class="params">(<span class="keyword">struct</span> file *filep, <span class="type">char</span> *buffer, <span class="type">size_t</span> len, <span class="type">loff_t</span> *offset)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sysinfo</span> <span class="title">si</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timespec64</span> <span class="title">uptime</span>;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> mem_free_mb, mem_total_mb, uptime_seconds;</span><br><span class="line">    <span class="type">int</span> num_procs = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">task</span>;</span></span><br><span class="line">    <span class="type">char</span> *info = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">char</span> *formatted_output = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">char</span> *info_ptr;</span><br><span class="line">    <span class="type">char</span> *line;</span><br><span class="line">    <span class="type">char</span> *next_info;</span><br><span class="line">    <span class="type">char</span> *next_line;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> hostname[<span class="number">65</span>]; <span class="comment">// HOST_NAME_MAX typically is 64</span></span><br><span class="line">    <span class="type">char</span> separator_line[<span class="number">65</span>]; <span class="comment">// Same size as hostname for simplicity</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *logo_lines[] = &#123;</span><br><span class="line">        <span class="string">&quot;       \e[33mLinux\e[0m        &quot;</span>,</span><br><span class="line">        <span class="string">&quot;        .-.        &quot;</span>,</span><br><span class="line">        <span class="string">&quot;       (.. |       &quot;</span>,</span><br><span class="line">        <span class="string">&quot;       \e[33m&lt;&gt;\e[0m  |        &quot;</span>,</span><br><span class="line">        <span class="string">&quot;      / --- \\      &quot;</span>,</span><br><span class="line">        <span class="string">&quot;     ( |   | |     &quot;</span>,</span><br><span class="line">        <span class="string">&quot;   \e[33m|\\\e[0m\\_)___/\\)\e[33m/\\\e[0m    &quot;</span>,</span><br><span class="line">        <span class="string">&quot;  \e[33m&lt;__)\e[0m------\e[33m(__/\e[0m    &quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">size_t</span> hostname_len;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialize the hostname and separator_line</span></span><br><span class="line">    <span class="built_in">memset</span>(hostname, <span class="number">0</span>, <span class="keyword">sizeof</span>(hostname));</span><br><span class="line">    <span class="built_in">strncpy</span>(hostname, init_uts_ns.name.nodename, <span class="keyword">sizeof</span>(hostname) - <span class="number">1</span>);</span><br><span class="line">    hostname_len = <span class="built_in">strlen</span>(hostname);</span><br><span class="line">    <span class="built_in">memset</span>(separator_line, <span class="string">&#x27;-&#x27;</span>, hostname_len);</span><br><span class="line">    separator_line[hostname_len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Clear the buffer</span></span><br><span class="line">    <span class="built_in">memset</span>(data_buffer, <span class="number">0</span>, BUFFER_SIZE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Gather system information</span></span><br><span class="line">    si_meminfo(&amp;si);</span><br><span class="line">    ktime_get_boottime_ts64(&amp;uptime);</span><br><span class="line">    for_each_process(task) <span class="keyword">if</span> (task-&gt;mm) num_procs++;</span><br><span class="line"></span><br><span class="line">    mem_free_mb = (si.freeram * si.mem_unit) / <span class="number">1024</span> / <span class="number">1024</span>;</span><br><span class="line">    mem_total_mb = (si.totalram * si.mem_unit) / <span class="number">1024</span> / <span class="number">1024</span>;</span><br><span class="line">    uptime_seconds = uptime.tv_sec;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Allocate info buffer dynamically</span></span><br><span class="line">    info = kmalloc(BUFFER_SIZE, GFP_KERNEL);</span><br><span class="line">    formatted_output = kmalloc(BUFFER_SIZE, GFP_KERNEL);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!info || !formatted_output) &#123;</span><br><span class="line">        kfree(info); <span class="comment">// It&#x27;s safe to call kfree with NULL</span></span><br><span class="line">        kfree(formatted_output);</span><br><span class="line">        <span class="keyword">return</span> -ENOMEM;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Prepare the info string with proper padding for each line</span></span><br><span class="line">    info_ptr = info;</span><br><span class="line">    info_ptr += <span class="built_in">snprintf</span>(info_ptr, BUFFER_SIZE - (info_ptr - info), <span class="string">&quot;\e[33m%s\e[0m\n%s\n&quot;</span>, hostname, separator_line);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Concatenate information based on the mask_info</span></span><br><span class="line">    <span class="keyword">if</span> (mask_info &amp; KFETCH_RELEASE || mask_info == KFETCH_FULL_INFO) &#123;</span><br><span class="line">        info_ptr += <span class="built_in">snprintf</span>(info_ptr, BUFFER_SIZE - (info_ptr - info), <span class="string">&quot;\e[33mKernel:\e[0m  %-20s\n&quot;</span>, utsname()-&gt;release);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mask_info &amp; KFETCH_CPU_MODEL || mask_info == KFETCH_FULL_INFO) &#123;</span><br><span class="line">        info_ptr += <span class="built_in">snprintf</span>(info_ptr, BUFFER_SIZE - (info_ptr - info), <span class="string">&quot;\e[33mCPU:\e[0m     %-20s\n&quot;</span>, boot_cpu_data.x86_model_id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mask_info &amp; KFETCH_NUM_CPUS || mask_info == KFETCH_FULL_INFO) &#123;</span><br><span class="line">        info_ptr += <span class="built_in">snprintf</span>(info_ptr, BUFFER_SIZE - (info_ptr - info), <span class="string">&quot;\e[33mCPUs:\e[0m    %d / %-14d\n&quot;</span>, num_online_cpus(), num_possible_cpus());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mask_info &amp; KFETCH_MEM || mask_info == KFETCH_FULL_INFO) &#123;</span><br><span class="line">        info_ptr += <span class="built_in">snprintf</span>(info_ptr, BUFFER_SIZE - (info_ptr - info), <span class="string">&quot;\e[33mMem:\e[0m     %lu MB / %lu MB\n&quot;</span>, mem_free_mb, mem_total_mb);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mask_info &amp; KFETCH_NUM_PROCS || mask_info == KFETCH_FULL_INFO) &#123;</span><br><span class="line">        info_ptr += <span class="built_in">snprintf</span>(info_ptr, BUFFER_SIZE - (info_ptr - info), <span class="string">&quot;\e[33mProcs:\e[0m   %-d\n&quot;</span>, num_procs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mask_info &amp; KFETCH_UPTIME || mask_info == KFETCH_FULL_INFO) &#123;</span><br><span class="line">        info_ptr += <span class="built_in">snprintf</span>(info_ptr, BUFFER_SIZE - (info_ptr - info), <span class="string">&quot;\e[33mUptime:\e[0m  %-lu mins\n&quot;</span>, uptime_seconds / <span class="number">60</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Formatting the output to align side by side with the logo</span></span><br><span class="line">    next_info = info;</span><br><span class="line">    line = formatted_output;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ARRAY_SIZE(logo_lines) || next_info; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; ARRAY_SIZE(logo_lines)) &#123;</span><br><span class="line">            line += <span class="built_in">sprintf</span>(line, <span class="string">&quot;%-20s&quot;</span>, logo_lines[i]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            line += <span class="built_in">sprintf</span>(line, <span class="string">&quot;%-20s&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (next_info) &#123;</span><br><span class="line">            next_line = <span class="built_in">strchr</span>(next_info, <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (next_line) *next_line = <span class="string">&#x27;\0&#x27;</span>; <span class="comment">// Terminate the current line</span></span><br><span class="line">            line += <span class="built_in">sprintf</span>(line, <span class="string">&quot; %s\n&quot;</span>, next_info);</span><br><span class="line">            next_info = next_line ? next_line + <span class="number">1</span> : <span class="literal">NULL</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            line += <span class="built_in">sprintf</span>(line, <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Copy the formatted buffer to user space</span></span><br><span class="line">    <span class="keyword">if</span> (copy_to_user(buffer, formatted_output, <span class="built_in">strlen</span>(formatted_output))) &#123;</span><br><span class="line">        kfree(info);</span><br><span class="line">        kfree(formatted_output);</span><br><span class="line">        <span class="keyword">return</span> -EFAULT; <span class="comment">// Failed to copy to user space</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Free the dynamically allocated buffers</span></span><br><span class="line">    kfree(info);</span><br><span class="line">    kfree(formatted_output);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Return the number of characters sent</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strlen</span>(formatted_output);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">ssize_t</span> <span class="title function_">dev_write</span><span class="params">(<span class="keyword">struct</span> file *filep, <span class="type">const</span> <span class="type">char</span> __user *buffer, <span class="type">size_t</span> len, <span class="type">loff_t</span> *offset)</span> &#123;</span><br><span class="line">    <span class="comment">// Update mask_info based on user input</span></span><br><span class="line">    <span class="keyword">if</span> (len == <span class="keyword">sizeof</span>(<span class="type">int</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (copy_from_user(&amp;mask_info, buffer, <span class="keyword">sizeof</span>(<span class="type">int</span>))) &#123;</span><br><span class="line">            printk(KERN_ERR <span class="string">&quot;Kfetch: Error setting mask_info\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> -EFAULT;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        printk(KERN_INFO <span class="string">&quot;Kfetch: Mask set to %d\n&quot;</span>, mask_info);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">sizeof</span>(<span class="type">int</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        printk(KERN_ERR <span class="string">&quot;Kfetch: Incorrect mask size\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(kfetch_init);</span><br><span class="line">module_exit(kfetch_exit);</span><br><span class="line"></span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br><span class="line">MODULE_AUTHOR(<span class="string">&quot;Benedict&quot;</span>);</span><br><span class="line">MODULE_DESCRIPTION(<span class="string">&quot;System Information Fetching Kernel Module&quot;</span>);</span><br><span class="line">MODULE_VERSION(<span class="string">&quot;0.1&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>Step 3: Create new Makefile</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim Makefile</span><br></pre></td></tr></table></figure><p><strong>Step 4: Implement a Makefile</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">obj-m += kfetch_mod_312551002.o</span><br><span class="line"></span><br><span class="line">DEVICE_NAME := kfetch_mod_312551002</span><br><span class="line"></span><br><span class="line"># Use shell to grab the major number dynamically. This will be empty <span class="keyword">if</span> the device is not loaded.</span><br><span class="line">MAJOR_NUMBER := $(shell grep $(DEVICE_NAME) /proc/devices | cut -d <span class="string">&#x27; &#x27;</span> -f <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">all: build unload remove_device_node load create_device_node</span><br><span class="line"></span><br><span class="line">build:</span><br><span class="line">make -C /lib/modules/$(shell uname -r)/build M=$(PWD) modules</span><br><span class="line"></span><br><span class="line">load: </span><br><span class="line"># Check <span class="keyword">if</span> module is already loaded, <span class="keyword">if</span> yes, remove it</span><br><span class="line">@<span class="keyword">if</span> lsmod | grep $(DEVICE_NAME) &amp;&gt; /dev/null ; then \</span><br><span class="line">echo <span class="string">&quot;Module $(DEVICE_NAME) is already loaded, unloading first...&quot;</span>; \</span><br><span class="line">sudo rmmod $(DEVICE_NAME) || <span class="literal">true</span>; \</span><br><span class="line">fi</span><br><span class="line"># Insert the module</span><br><span class="line">sudo insmod $(DEVICE_NAME).ko</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create_device_node:</span><br><span class="line"># Check <span class="keyword">if</span> device node already exists, <span class="keyword">if</span> not, create it</span><br><span class="line">@<span class="keyword">if</span> [ ! -e /dev/$(DEVICE_NAME) ] ; then \</span><br><span class="line">echo <span class="string">&quot;Creating device node /dev/$(DEVICE_NAME)...&quot;</span>; \</span><br><span class="line">sudo mknod /dev/$(DEVICE_NAME) c $(MAJOR_NUMBER) <span class="number">0</span> ; \</span><br><span class="line">sudo chmod <span class="number">666</span> /dev/$(DEVICE_NAME) ; \</span><br><span class="line"><span class="keyword">else</span> \</span><br><span class="line">echo <span class="string">&quot;Device node /dev/$(DEVICE_NAME) already exists.&quot;</span>; \</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">clean:</span><br><span class="line">make -C /lib/modules/$(shell uname -r)/build M=$(PWD) clean</span><br><span class="line"></span><br><span class="line">unload:</span><br><span class="line"># Remove the module <span class="keyword">if</span> it is loaded</span><br><span class="line">@<span class="keyword">if</span> lsmod | grep $(DEVICE_NAME) &amp;&gt; /dev/null ; then \</span><br><span class="line">echo <span class="string">&quot;Unloading module $(DEVICE_NAME)...&quot;</span>; \</span><br><span class="line">sudo rmmod $(DEVICE_NAME) || <span class="literal">true</span>; \</span><br><span class="line"><span class="keyword">else</span> \</span><br><span class="line">echo <span class="string">&quot;Module $(DEVICE_NAME) is not loaded.&quot;</span>; \</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">remove_device_node:</span><br><span class="line"># Remove the device node <span class="keyword">if</span> it exists</span><br><span class="line">@<span class="keyword">if</span> [ -e /dev/$(DEVICE_NAME) ] ; then \</span><br><span class="line">echo <span class="string">&quot;Removing device node /dev/$(DEVICE_NAME)...&quot;</span>; \</span><br><span class="line">sudo rm -f /dev/$(DEVICE_NAME) ; \</span><br><span class="line"><span class="keyword">else</span> \</span><br><span class="line">echo <span class="string">&quot;Device node /dev/$(DEVICE_NAME) does not exist.&quot;</span>; \</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">.PHONY: all build load create_device_node clean unload remove_device_node</span><br></pre></td></tr></table></figure><p><strong>Step 5: Compile written program</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p><strong>Step 6: Compile test program</strong><br>We have prepared the user-space program kfetch for you. Source code <code>kfetch.c</code> and the header file (shared with the kernel module) <code>kfetch.h</code> to test your module.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cc 。、kfetch.c -o kfetch</span><br></pre></td></tr></table></figure><p><strong>Step 7: Test the program</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./kfetch -h</span><br></pre></td></tr></table></figure>   <div>                                                    <img alt="張永義 競賽圖片" data-src="/hexo/images/OS_3/OS_2.png" />                                                </div><p><strong>Step 8: Test the program</strong><br>Initially, when the module is loaded, the first invocation without any options will display all the information. If the options -c and m are specified, only the information about the CPU model name and the memory will be displayed.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./kfetch -a</span><br></pre></td></tr></table></figure>   <div>                                                    <img alt="張永義 競賽圖片" data-src="/hexo/images/OS_3/OS_3.png" />                                                </div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./kfetch -m -c</span><br></pre></td></tr></table></figure>   <div>                                                    <img alt="張永義 競賽圖片" data-src="/hexo/images/OS_3/OS_4.png" />                                                </div>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;Assignment 3: System Information Fetching Kernel Module&lt;ul&gt;
&lt;li&gt;Linux Kernel Module&lt;/li&gt;
&lt;li&gt;Descriptions&lt;/li&gt;
&lt;li&gt;Kernel Module: k</summary>
      
    
    
    
    <category term="OS" scheme="https://benedict-cs.github.io/hexo/categories/OS/"/>
    
    
    <category term="OS" scheme="https://benedict-cs.github.io/hexo/tags/OS/"/>
    
    <category term="Linux Kernel" scheme="https://benedict-cs.github.io/hexo/tags/Linux-Kernel/"/>
    
  </entry>
  
  <entry>
    <title>Apply different scheduling policies on created threads</title>
    <link href="https://benedict-cs.github.io/hexo/2024/11/13/linux_scheduling_policies/"/>
    <id>https://benedict-cs.github.io/hexo/2024/11/13/linux_scheduling_policies/</id>
    <published>2024-11-12T22:40:12.000Z</published>
    <updated>2024-07-03T03:38:15.071Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Assignment 2: Implement a program to apply different scheduling policies on created threads<ul><li>Linux Scheduling Policy<ul><li><code>SCHED_FIFO</code></li></ul></li><li>Requirements<ul><li>Main thread</li><li>Worker Thread</li></ul></li></ul></li></ul><h2 id="Implement-a-program-to-apply-different-scheduling-policies-on-created-threads"><a href="#Implement-a-program-to-apply-different-scheduling-policies-on-created-threads" class="headerlink" title="Implement a program to apply different scheduling policies on created threads"></a>Implement a program to apply different scheduling policies on created threads</h2><h3 id="Q1-Describe-how-you-implemented-the-program-in-detail"><a href="#Q1-Describe-how-you-implemented-the-program-in-detail" class="headerlink" title="Q1: Describe how you implemented the program in detail."></a>Q1: Describe how you implemented the program in detail.</h3><p><strong>Step 0: Create new program</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim sched_demo_312551002.c</span><br></pre></td></tr></table></figure><p><strong>Step 1: Define and include related library</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br></pre></td></tr></table></figure><p>I enabled the GNU extensions because I’ll using functions like <code>CPU_ZERO</code>, <code>CPU_SET</code>, and <code>pthread_setaffinity_np</code>, if not enabled the GNU extensions, when compile will occur errors and warnings. </p><p><strong>Step 2: Define a struct for collecting required thread information</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">pthread_t</span> thread_id;</span><br><span class="line">    <span class="type">int</span> thread_num;</span><br><span class="line">    <span class="type">int</span> sched_policy;</span><br><span class="line">    <span class="type">int</span> sched_priority;</span><br><span class="line">    <span class="type">pthread_barrier_t</span> *barrier;</span><br><span class="line">    <span class="type">double</span> time_wait;</span><br><span class="line">&#125; <span class="type">thread_info_t</span>;</span><br></pre></td></tr></table></figure><p><strong>Step 3: Implement the Parse program arguments</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">testcases:</span><br><span class="line"></span><br><span class="line">-n 1 -t 0.5 -s NORMAL -p -1</span><br><span class="line">-n 2 -t 0.5 -s FIFO,FIFO -p 10,20</span><br><span class="line">-n 3 -t 1.0 -s NORMAL,FIFO,FIFO -p -1,10,30</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">parse_args</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[], <span class="type">int</span> *num_threads, <span class="type">double</span> *time_wait, </span></span><br><span class="line"><span class="params">                <span class="type">char</span> ***policies_array, <span class="type">char</span> ***priorities_array)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *policies_str = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">char</span> *priorities_str = <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* Parse program arguments */</span></span><br><span class="line">    <span class="type">int</span> opt;</span><br><span class="line">    <span class="keyword">while</span> ((opt = getopt(argc, argv, <span class="string">&quot;n:t:s:p:&quot;</span>)) != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (opt) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;n&#x27;</span>:</span><br><span class="line">                *num_threads = atoi(optarg);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;t&#x27;</span>:</span><br><span class="line">                *time_wait = atof(optarg);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">                policies_str = optarg;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;p&#x27;</span>:</span><br><span class="line">                priorities_str = optarg;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Split policies and priotities argument */</span></span><br><span class="line">    *policies_array = <span class="built_in">malloc</span>(*num_threads * <span class="keyword">sizeof</span>(<span class="type">char</span> *));</span><br><span class="line">    *priorities_array = <span class="built_in">malloc</span>(*num_threads * <span class="keyword">sizeof</span>(<span class="type">char</span> *));</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> *rest_policy = policies_str;</span><br><span class="line">    <span class="type">char</span> *rest_priority = priorities_str;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; *num_threads; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">            (*policies_array)[i] = strtok_r(policies_str, <span class="string">&quot;,&quot;</span>, &amp;rest_policy);</span><br><span class="line">            (*priorities_array)[i] = strtok_r(priorities_str, <span class="string">&quot;,&quot;</span>, &amp;rest_priority);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            (*policies_array)[i] = strtok_r(<span class="literal">NULL</span>, <span class="string">&quot;,&quot;</span>, &amp;rest_policy);</span><br><span class="line">            (*priorities_array)[i] = strtok_r(<span class="literal">NULL</span>, <span class="string">&quot;,&quot;</span>, &amp;rest_priority);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Command-line arguments are parsed using the <code>getopt</code> function. The arguments include the number of threads <code>-n</code>, time to wait <code>-t</code>, scheduling policies <code>-s</code>, and priorities <code>-p</code>. The values are stored in appropriate variables for later use.</li><li>Special attention is given to the <code>-s</code> and <code>-p</code> arguments, which can have multiple values separated by <code>&quot;,&quot;</code>. These values are split and stored in arrays for individual thread configurations.</li></ul><p><strong>Step 4: Set CPU affinity and thread attribute</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">set_thread_attributes</span><span class="params">(<span class="type">pthread_attr_t</span> *attr, <span class="type">int</span> sched_policy, <span class="type">int</span> sched_priority)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* Set CPU affinity */</span></span><br><span class="line">    <span class="type">cpu_set_t</span> cpuset;</span><br><span class="line">    pthread_attr_init(attr);</span><br><span class="line">    CPU_ZERO(&amp;cpuset);</span><br><span class="line">    CPU_SET(<span class="number">0</span>, &amp;cpuset);</span><br><span class="line">    pthread_attr_setaffinity_np(attr, <span class="keyword">sizeof</span>(<span class="type">cpu_set_t</span>), &amp;cpuset);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Set FIFO priority and attribute */</span></span><br><span class="line">    <span class="keyword">if</span> (sched_policy == SCHED_FIFO) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">sched_param</span> <span class="title">param</span>;</span></span><br><span class="line">        param.sched_priority = sched_priority;</span><br><span class="line">        pthread_attr_setschedpolicy(attr, SCHED_FIFO);</span><br><span class="line">        pthread_attr_setschedparam(attr, &amp;param);</span><br><span class="line">        pthread_attr_setinheritsched(attr, PTHREAD_EXPLICIT_SCHED);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>CPU_ZERO</code> and <code>CPU_SET</code> are used to bind threads to a specific CPU (CPU 0 in this case), ensuring that they run on the designated processor.</li><li>If the scheduling policy is <code>SCHED_FIFO</code>, additional attributes such as scheduling policy and priority are set. <code>SCHED_FIFO</code> is a real-time scheduling policy where a thread runs until it either finishes or is preempted by a higher priority thread. If scheduling policy is <code>NORMAL</code> will skip this part.</li></ul><p><strong>Step 5: Implement the Worker Thread</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">thread_func</span><span class="params">(<span class="type">void</span> *arg)</span> &#123;</span><br><span class="line">    <span class="type">thread_info_t</span> *tinfo = (<span class="type">thread_info_t</span> *)arg;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timespec</span> <span class="title">start</span>, <span class="title">current</span>;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* Wait until all threads are ready */</span></span><br><span class="line">    pthread_barrier_wait(tinfo-&gt;barrier);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Do the task */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Thread %d is running\n&quot;</span>, tinfo-&gt;thread_num);</span><br><span class="line">        clock_gettime(CLOCK_MONOTONIC, &amp;start);</span><br><span class="line">        <span class="type">double</span> elapsed = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Busy for &lt;time_wait&gt; seconds */</span></span><br><span class="line">        <span class="keyword">while</span> (elapsed &lt; tinfo-&gt;time_wait) &#123;</span><br><span class="line">            clock_gettime(CLOCK_MONOTONIC, &amp;current);</span><br><span class="line">            elapsed = current.tv_sec - start.tv_sec + </span><br><span class="line">                     (current.tv_nsec - start.tv_nsec) / <span class="number">1000000000.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Exit the function  */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>The worker thread’s function is defined here. Each thread waits at the barrier until all threads are ready to start simultaneously. This ensures synchronized start across all threads.</li><li>Inside the loop, each thread performs its task for a specified duration <code>time_wait</code>. This is achieved using a busy-wait loop, calculating elapsed time with <code>clock_gettime</code>.</li></ul><p><strong>Step 6: Implement the Main Thread</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* Parse program arguments */</span></span><br><span class="line">    <span class="type">int</span> num_threads;</span><br><span class="line">    <span class="type">double</span> time_wait;</span><br><span class="line">    <span class="type">char</span> **policies;</span><br><span class="line">    <span class="type">char</span> **priorities;</span><br><span class="line"></span><br><span class="line">    parse_args(argc, argv, &amp;num_threads, &amp;time_wait, &amp;policies, &amp;priorities);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Initialize a barrier for synchronizing the start of the worker threads */</span></span><br><span class="line">    <span class="type">pthread_barrier_t</span> barrier;</span><br><span class="line">    pthread_barrier_init(&amp;barrier, <span class="literal">NULL</span>, num_threads);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Allocate memory for storing thread information */</span></span><br><span class="line">    <span class="type">thread_info_t</span> *tinfo = <span class="built_in">calloc</span>(num_threads, <span class="keyword">sizeof</span>(*tinfo));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Create &lt;num_threads&gt; worker threads */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num_threads; i++) &#123;</span><br><span class="line">        tinfo[i].thread_num = i;</span><br><span class="line">        tinfo[i].time_wait = time_wait;</span><br><span class="line">        tinfo[i].barrier = &amp;barrier;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* Set thread scheduling policy and priority */</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(policies[i], <span class="string">&quot;FIFO&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">            tinfo[i].sched_policy = SCHED_FIFO;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            tinfo[i].sched_policy = SCHED_OTHER;</span><br><span class="line">        </span><br><span class="line">        tinfo[i].sched_priority = atoi(priorities[i]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Set attributes to each thread, including CPU affinity and scheduling */</span></span><br><span class="line">        <span class="type">pthread_attr_t</span> attr;</span><br><span class="line">        set_thread_attributes(&amp;attr, tinfo[i].sched_policy, tinfo[i].sched_priority);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* Start the thread */</span></span><br><span class="line">        pthread_create(&amp;tinfo[i].thread_id, &amp;attr, thread_func, &amp;tinfo[i]);</span><br><span class="line">        pthread_attr_destroy(&amp;attr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Wait for all threads to finish */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num_threads; i++) &#123;</span><br><span class="line">        pthread_join(tinfo[i].thread_id, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Clean up */</span></span><br><span class="line">    pthread_barrier_destroy(&amp;barrier);</span><br><span class="line">    <span class="built_in">free</span>(tinfo);</span><br><span class="line">    <span class="built_in">free</span>(policies);</span><br><span class="line">    <span class="built_in">free</span>(priorities);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>The main function initializes the threading environment and starts the worker threads.</li><li>It begins by parsing command-line arguments to determine the number of threads, their wait times, scheduling policies, and priorities.</li><li>A barrier is initialized to synchronize the start of all worker threads.</li><li>Threads are created in a loop. Each thread is given a unique number, its wait time, a reference to the barrier, and its scheduling policy and priority.</li><li>Thread attributes are set according to the specified scheduling policy and CPU affinity.</li><li>Threads are then started with <code>pthread_create</code>.</li><li>Finally, the main thread waits for all worker threads to complete using <code>pthread_join</code> and performs necessary cleanup operations like destroying the barrier and freeing allocated memory.</li></ul><p><strong>Complete sched_demo_312551002.c program like below:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">pthread_t</span> thread_id;</span><br><span class="line">    <span class="type">int</span> thread_num;</span><br><span class="line">    <span class="type">int</span> sched_policy;</span><br><span class="line">    <span class="type">int</span> sched_priority;</span><br><span class="line">    <span class="type">pthread_barrier_t</span> *barrier;</span><br><span class="line">    <span class="type">double</span> time_wait;</span><br><span class="line">&#125; <span class="type">thread_info_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">parse_args</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[], <span class="type">int</span> *num_threads, <span class="type">double</span> *time_wait, </span></span><br><span class="line"><span class="params">                <span class="type">char</span> ***policies_array, <span class="type">char</span> ***priorities_array)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *policies_str = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">char</span> *priorities_str = <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* Parse program arguments */</span></span><br><span class="line">    <span class="type">int</span> opt;</span><br><span class="line">    <span class="keyword">while</span> ((opt = getopt(argc, argv, <span class="string">&quot;n:t:s:p:&quot;</span>)) != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (opt) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;n&#x27;</span>:</span><br><span class="line">                *num_threads = atoi(optarg);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;t&#x27;</span>:</span><br><span class="line">                *time_wait = atof(optarg);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">                policies_str = optarg;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;p&#x27;</span>:</span><br><span class="line">                priorities_str = optarg;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Split policies and priotities argument */</span></span><br><span class="line">    *policies_array = <span class="built_in">malloc</span>(*num_threads * <span class="keyword">sizeof</span>(<span class="type">char</span> *));</span><br><span class="line">    *priorities_array = <span class="built_in">malloc</span>(*num_threads * <span class="keyword">sizeof</span>(<span class="type">char</span> *));</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> *rest_policy = policies_str;</span><br><span class="line">    <span class="type">char</span> *rest_priority = priorities_str;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; *num_threads; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">            (*policies_array)[i] = strtok_r(policies_str, <span class="string">&quot;,&quot;</span>, &amp;rest_policy);</span><br><span class="line">            (*priorities_array)[i] = strtok_r(priorities_str, <span class="string">&quot;,&quot;</span>, &amp;rest_priority);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            (*policies_array)[i] = strtok_r(<span class="literal">NULL</span>, <span class="string">&quot;,&quot;</span>, &amp;rest_policy);</span><br><span class="line">            (*priorities_array)[i] = strtok_r(<span class="literal">NULL</span>, <span class="string">&quot;,&quot;</span>, &amp;rest_priority);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">set_thread_attributes</span><span class="params">(<span class="type">pthread_attr_t</span> *attr, <span class="type">int</span> sched_policy, <span class="type">int</span> sched_priority)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* Set CPU affinity */</span></span><br><span class="line">    <span class="type">cpu_set_t</span> cpuset;</span><br><span class="line">    pthread_attr_init(attr);</span><br><span class="line">    CPU_ZERO(&amp;cpuset);</span><br><span class="line">    CPU_SET(<span class="number">0</span>, &amp;cpuset);</span><br><span class="line">    pthread_attr_setaffinity_np(attr, <span class="keyword">sizeof</span>(<span class="type">cpu_set_t</span>), &amp;cpuset);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Set FIFO priority and attribute */</span></span><br><span class="line">    <span class="keyword">if</span> (sched_policy == SCHED_FIFO) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">sched_param</span> <span class="title">param</span>;</span></span><br><span class="line">        param.sched_priority = sched_priority;</span><br><span class="line">        pthread_attr_setschedpolicy(attr, SCHED_FIFO);</span><br><span class="line">        pthread_attr_setschedparam(attr, &amp;param);</span><br><span class="line">        pthread_attr_setinheritsched(attr, PTHREAD_EXPLICIT_SCHED);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">thread_func</span><span class="params">(<span class="type">void</span> *arg)</span> &#123;</span><br><span class="line">    <span class="type">thread_info_t</span> *tinfo = (<span class="type">thread_info_t</span> *)arg;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timespec</span> <span class="title">start</span>, <span class="title">current</span>;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* Wait until all threads are ready */</span></span><br><span class="line">    pthread_barrier_wait(tinfo-&gt;barrier);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Do the task */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Thread %d is running\n&quot;</span>, tinfo-&gt;thread_num);</span><br><span class="line">        clock_gettime(CLOCK_MONOTONIC, &amp;start);</span><br><span class="line">        <span class="type">double</span> elapsed = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Busy for &lt;time_wait&gt; seconds */</span></span><br><span class="line">        <span class="keyword">while</span> (elapsed &lt; tinfo-&gt;time_wait) &#123;</span><br><span class="line">            clock_gettime(CLOCK_MONOTONIC, &amp;current);</span><br><span class="line">            elapsed = current.tv_sec - start.tv_sec + </span><br><span class="line">                     (current.tv_nsec - start.tv_nsec) / <span class="number">1000000000.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Exit the function  */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* Parse program arguments */</span></span><br><span class="line">    <span class="type">int</span> num_threads;</span><br><span class="line">    <span class="type">double</span> time_wait;</span><br><span class="line">    <span class="type">char</span> **policies;</span><br><span class="line">    <span class="type">char</span> **priorities;</span><br><span class="line"></span><br><span class="line">    parse_args(argc, argv, &amp;num_threads, &amp;time_wait, &amp;policies, &amp;priorities);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Initialize a barrier for synchronizing the start of the worker threads */</span></span><br><span class="line">    <span class="type">pthread_barrier_t</span> barrier;</span><br><span class="line">    pthread_barrier_init(&amp;barrier, <span class="literal">NULL</span>, num_threads);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Allocate memory for storing thread information */</span></span><br><span class="line">    <span class="type">thread_info_t</span> *tinfo = <span class="built_in">calloc</span>(num_threads, <span class="keyword">sizeof</span>(*tinfo));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Create &lt;num_threads&gt; worker threads */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num_threads; i++) &#123;</span><br><span class="line">        tinfo[i].thread_num = i;</span><br><span class="line">        tinfo[i].time_wait = time_wait;</span><br><span class="line">        tinfo[i].barrier = &amp;barrier;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* Set thread scheduling policy and priority */</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(policies[i], <span class="string">&quot;FIFO&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">            tinfo[i].sched_policy = SCHED_FIFO;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            tinfo[i].sched_policy = SCHED_OTHER;</span><br><span class="line">        </span><br><span class="line">        tinfo[i].sched_priority = atoi(priorities[i]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Set attributes to each thread, including CPU affinity and scheduling */</span></span><br><span class="line">        <span class="type">pthread_attr_t</span> attr;</span><br><span class="line">        set_thread_attributes(&amp;attr, tinfo[i].sched_policy, tinfo[i].sched_priority);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* Start the thread */</span></span><br><span class="line">        pthread_create(&amp;tinfo[i].thread_id, &amp;attr, thread_func, &amp;tinfo[i]);</span><br><span class="line">        pthread_attr_destroy(&amp;attr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Wait for all threads to finish */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num_threads; i++) &#123;</span><br><span class="line">        pthread_join(tinfo[i].thread_id, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Clean up */</span></span><br><span class="line">    pthread_barrier_destroy(&amp;barrier);</span><br><span class="line">    <span class="built_in">free</span>(tinfo);</span><br><span class="line">    <span class="built_in">free</span>(policies);</span><br><span class="line">    <span class="built_in">free</span>(priorities);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Compile implemented program</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -o sched_demo_312551002 sched_demo_312551002.c</span><br></pre></td></tr></table></figure><p><strong>Test the program</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./sched_test.sh ./sched_demo ./sched_demo_312551002</span><br></pre></td></tr></table></figure><p><strong>Screenshot of test result:</strong><br>   <div><br>                                                <img alt="張永義 競賽圖片" data-src="/hexo/images/OS_2/OS_1.png" /><br>                                            </div></p><h3 id="Q2-Describe-the-results-of-sched-demo-n-3-t-1-0-s-NORMAL-FIFO-FIFO-p-1-10-30-and-what-causes-that"><a href="#Q2-Describe-the-results-of-sched-demo-n-3-t-1-0-s-NORMAL-FIFO-FIFO-p-1-10-30-and-what-causes-that" class="headerlink" title="Q2: Describe the results of .&#x2F;sched_demo -n 3 -t 1.0 -s NORMAL,FIFO,FIFO -p -1,10,30 and what causes that."></a>Q2: Describe the results of .&#x2F;sched_demo -n 3 -t 1.0 -s NORMAL,FIFO,FIFO -p -1,10,30 and what causes that.</h3>   <div>                                                <img alt="張永義 競賽圖片" data-src="/hexo/images/OS_2/OS_2.png" />                                            </div><ul><li><strong>CFS and NORMAL Policy:</strong> Thread 0 and Thread 2, which are both scheduled under the NORMAL policy, are managed by the CFS. This ensures they receive fair CPU time slices. Despite their lower priority compared to the FIFO threads, CFS allocates them CPU time in a manner that prevents starvation and ensures fair allocation. This is why these threads are scheduled intermittently even amidst the higher priority FIFO threads.</li><li><strong>FIFO Policy and Preemption:</strong> Threads 1 and 3, scheduled under the FIFO policy, are expected to run based on their priority levels. Thread 3, with the highest priority (30), should theoretically preempt other threads and run to completion first. However, the interleaved scheduling of Thread 0 and Thread 2 indicates that CFS intervention allows these NORMAL policy threads to receive CPU time, thus not strictly adhering to FIFO priorities.</li></ul><h3 id="Q3-Describe-the-results-of-sched-demo-n-4-t-0-5-s-NORMAL-FIFO-NORMAL-FIFO-p-1-10-1-30-and-what-causes-that"><a href="#Q3-Describe-the-results-of-sched-demo-n-4-t-0-5-s-NORMAL-FIFO-NORMAL-FIFO-p-1-10-1-30-and-what-causes-that" class="headerlink" title="Q3: Describe the results of .&#x2F;sched_demo -n 4 -t 0.5 -s NORMAL,FIFO,NORMAL,FIFO -p -1,10,-1,30, and what causes that."></a>Q3: Describe the results of .&#x2F;sched_demo -n 4 -t 0.5 -s NORMAL,FIFO,NORMAL,FIFO -p -1,10,-1,30, and what causes that.</h3>   <div>                                                <img alt="張永義 競賽圖片" data-src="/hexo/images/OS_2/OS_3.png" />                                            </div><ul><li><strong>CFS and NORMAL Policy:</strong> Although Thread 0 and Thread 2 have a NORMAL scheduling policy, the CFS ensures they both receive a fair portion of CPU time. CFS is designed to equitably distribute CPU time slices and does not allow real-time processes to completely overshadow regular ones. This design accounts for why Threads 0 and 2 are scheduled intermittently, even though there are FIFO threads with higher priorities running.</li><li><strong>FIFO Policy and Preemption:</strong> For FIFO threads such as Thread 1 and Thread 3, the scheduling is based on their priority levels. Thread 3, with the highest priority (30), should, in a perfect FIFO system, run to completion before Thread 1, which has a lower priority (10), begins. However, the interleaving of Thread 0 and Thread 2 suggests that CFS is providing time slices to NORMAL policy threads, thereby not strictly adhering to FIFO priority rules.</li></ul><h3 id="Q4-Describe-how-did-you-implement-n-second-busy-waiting"><a href="#Q4-Describe-how-did-you-implement-n-second-busy-waiting" class="headerlink" title="Q4: Describe how did you implement n-second-busy-waiting?"></a>Q4: Describe how did you implement n-second-busy-waiting?</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">thread_func</span><span class="params">(<span class="type">void</span> *arg)</span> &#123;</span><br><span class="line">    <span class="type">thread_info_t</span> *tinfo = (<span class="type">thread_info_t</span> *)arg;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timespec</span> <span class="title">start</span>, <span class="title">current</span>;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* Wait until all threads are ready */</span></span><br><span class="line">    pthread_barrier_wait(tinfo-&gt;barrier);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Do the task */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Thread %d is running\n&quot;</span>, tinfo-&gt;thread_num);</span><br><span class="line">        clock_gettime(CLOCK_MONOTONIC, &amp;start);</span><br><span class="line">        <span class="type">double</span> elapsed = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Busy for &lt;time_wait&gt; seconds */</span></span><br><span class="line">        <span class="keyword">while</span> (elapsed &lt; tinfo-&gt;time_wait) &#123;</span><br><span class="line">            clock_gettime(CLOCK_MONOTONIC, &amp;current);</span><br><span class="line">            elapsed = current.tv_sec - start.tv_sec + </span><br><span class="line">                     (current.tv_nsec - start.tv_nsec) / <span class="number">1000000000.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Exit the function  */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>Time Measurement:</strong> The <code>clock_gettime</code> function with <code>CLOCK_MONOTONIC</code> is used to retrieve the current time at the start of the busy-waiting loop and then repeatedly during the loop to measure the elapsed time.</li><li><strong>Busy-Wait Loop:</strong> Each thread enters a while loop that continually checks whether the elapsed time since the start of the loop has exceeded the specified waiting time (time_wait).</li><li><strong>Elapsed Time Calculation:</strong> Inside the loop, clock_gettime is called again to get the current time, and the elapsed time is calculated by subtracting the starting time (start) from the current time (current). The result includes both the seconds (tv_sec) and nanoseconds (tv_nsec) components.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;Assignment 2: Implement a program to apply different scheduling policies on created threads&lt;ul&gt;
&lt;li&gt;Linux Scheduling Policy&lt;ul&gt;
&lt;li</summary>
      
    
    
    
    <category term="OS" scheme="https://benedict-cs.github.io/hexo/categories/OS/"/>
    
    
    <category term="OS" scheme="https://benedict-cs.github.io/hexo/tags/OS/"/>
    
    <category term="Linux Kernel" scheme="https://benedict-cs.github.io/hexo/tags/Linux-Kernel/"/>
    
  </entry>
  
  <entry>
    <title>Compiling Linux Kernel and Add Custom System Calls</title>
    <link href="https://benedict-cs.github.io/hexo/2024/11/12/compile_linux_kernel/"/>
    <id>https://benedict-cs.github.io/hexo/2024/11/12/compile_linux_kernel/</id>
    <published>2024-11-11T22:40:12.000Z</published>
    <updated>2024-07-03T03:36:46.895Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Assignment 1: Compiling Linux Kernel and Adding Custom System Calls<ul><li>Compiling Linux Kernel<ul><li><code>Change kernel suffix</code></li></ul></li><li>Adding custom system calls<ul><li><code>sys_hello</code></li><li><code>sys_revstr</code></li></ul></li></ul></li></ul><h2 id="Part-1-Compiling-Linux-Kernel-Change-kernel-suffix"><a href="#Part-1-Compiling-Linux-Kernel-Change-kernel-suffix" class="headerlink" title="Part 1: Compiling Linux Kernel &amp; Change kernel suffix"></a>Part 1: Compiling Linux Kernel &amp; Change kernel suffix</h2><p><strong>Step 1: Download and Extract the Linux kernel source code</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.19.12.tar.xz</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xJf linux-5.19.12.tar.xz</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd linux-5.19.12</span><br></pre></td></tr></table></figure><p><strong>Step 2: Install essential tools and libraries required for compiling the kernel</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br><span class="line">sudo apt-get install flex</span><br><span class="line">sudo apt-get install bison</span><br><span class="line">sudo apt install build-essential</span><br><span class="line">sudo apt install libelf-dev libssl-dev</span><br><span class="line">sudo apt-get install libncurses5-dev gcc make git exuberant-ctags bc libssl-dev</span><br></pre></td></tr></table></figure><p><strong>Step 3: Copy current kernel config file, then set it as default configuration</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /boot/config-`uname -r`* .config</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make defconfig</span><br></pre></td></tr></table></figure><p><strong>Step 4: Modify the config file</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim .config</span><br></pre></td></tr></table></figure><p>Find <code>CONFIG_LOCALVERSION</code> change value to <code>-os-312551002</code></p><p><strong>Step 5: Compile the kernel (wait 20~50 mins)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make -j4</span><br></pre></td></tr></table></figure><p><strong>Step 6: Install the kernel modules</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make modules_install install</span><br></pre></td></tr></table></figure><p><strong>Step 7: Update GRUB, the bootloader</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-grub2</span><br></pre></td></tr></table></figure><p><strong>Step 8: Reboot the system</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><p>Press <strong>Esc</strong> button when system boot &gt; Advanced options for Ubuntu &gt; choose <code>Linux 5.19.12-os-312551002</code> to start</p><p><strong>Step 9: Check the running kernel version</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -a</span><br></pre></td></tr></table></figure><p><strong>The screenshot of changed kernel suffix</strong><br>       <div><br>                                            <img alt="張永義 競賽圖片" data-src="/hexo/images/OS_1/OS_1.png" /><br>                                        </div></p><h2 id="Part-2-Adding-custom-system-calls"><a href="#Part-2-Adding-custom-system-calls" class="headerlink" title="Part 2: Adding custom system calls"></a>Part 2: Adding custom system calls</h2><h3 id="sys-hello"><a href="#sys-hello" class="headerlink" title="sys_hello"></a><code>sys_hello</code></h3><p>For the implementation of the sys_hello system calls, I <font color="#f00">modified 4 kernel source files</font> and <font color="#f00">added 1 new C code</font> to verify if the system calls work correctly. The modified and added files are:</p><ol><li>linux-5.19.12&#x2F;kernel&#x2F;<font color="#f00">sys.c</font></li><li>linux-5.19.12&#x2F;arch&#x2F;x86&#x2F;include&#x2F;generated&#x2F;uapi&#x2F;asm&#x2F;<font color="#f00">unistd_64.h</font></li><li>linux-5.19.12&#x2F;arch&#x2F;x86&#x2F;entry&#x2F;syscalls&#x2F;<font color="#f00">syscall_64.tbl</font></li><li>linux-5.19.12&#x2F;include&#x2F;linux&#x2F;<font color="#f00">syscalls.h</font></li><li><font color="#f00">sys_hello.c</font></li></ol><p><strong>Step 1: In the sys.c file, add the following code to defines a new system call named “hello”.</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SYSCALL_DEFINE0(hello)&#123;</span><br><span class="line">printk(KERN_INFO <span class="string">&quot;Hello, world! \n&quot;</span>);</span><br><span class="line">printk(KERN_INFO <span class="string">&quot;312551002 \n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Step 2: In the unistd_64.h file, add the following code to defines the system call number for “hello”.</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define __NR_hello 548</span><br></pre></td></tr></table></figure><p><strong>Step 3: In the syscall_64.tbl file, add the following entry to map system call number to its corresponding function.</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">548commonhellosys_hello</span><br></pre></td></tr></table></figure><p><strong>Step 4: In the syscalls.h file, add the following code to add the new system call in the header file.</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">asmlinkage long sys_hello(void);</span><br></pre></td></tr></table></figure><p><strong>Step 5: Create new C code file named sys_hello.c and add the following code:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_hello 548</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    <span class="type">int</span> ret = syscall(__NR_hello);</span><br><span class="line">    assert(ret == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Step 6: Rebuild the kernel to compile the modified kernel source code.</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p><strong>Step 7: Reinstall the kernel</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make modules_install install</span><br></pre></td></tr></table></figure><p><strong>Step 8: Reboot the kernel</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><p><strong>Step 9: Compile the sys_hello.c file to test if the system call operates correctly.</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc sys_hello.c -o sys_hello</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./sys_hello</span><br></pre></td></tr></table></figure><p><strong>Step 10: Display the output messages produced by the sys_hello system call.</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dmesg | tail</span><br></pre></td></tr></table></figure><p><strong>The screenshot of the results of executing sys_hello system call:</strong><br>       <div><br>                                            <img alt="張永義 競賽圖片" data-src="/hexo/images/OS_1/OS_2.jpg" /><br>                                        </div></p><h3 id="sys-revstr"><a href="#sys-revstr" class="headerlink" title="sys_revstr"></a><code>sys_revstr</code></h3><p>For the implementation of the sys_hello system calls, I <font color="#f00">modified 4 kernel source files</font> and <font color="#f00">added 1 new C code</font> to verify if the system calls work correctly. The modified and added files are:</p><ol><li>linux-5.19.12&#x2F;kernel&#x2F;<font color="#f00">sys.c</font></li><li>linux-5.19.12&#x2F;arch&#x2F;x86&#x2F;include&#x2F;generated&#x2F;uapi&#x2F;asm&#x2F;<font color="#f00">unistd_64.h</font></li><li>linux-5.19.12&#x2F;arch&#x2F;x86&#x2F;entry&#x2F;syscalls&#x2F;<font color="#f00">syscall_64.tbl</font></li><li>linux-5.19.12&#x2F;include&#x2F;linux&#x2F;<font color="#f00">syscalls.h</font></li><li><font color="#f00">sys_revstr.c</font></li></ol><p><strong>Step 1: In the sys.c file, add the following code to defines a new system call named “revstr”.</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">SYSCALL_DEFINE2(revstr, <span class="type">int</span>, len, <span class="type">char</span> __user *, usr_str) &#123;</span><br><span class="line">    <span class="type">char</span> k_str[<span class="number">256</span>];</span><br><span class="line">    <span class="type">char</span> k_revstr[<span class="number">256</span>];</span><br><span class="line">    <span class="type">int</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> end = len - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(len &gt;= <span class="keyword">sizeof</span>(k_str))</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line">    <span class="keyword">if</span>(copy_from_user(k_str, usr_str, len))</span><br><span class="line">        <span class="keyword">return</span> -EFAULT;</span><br><span class="line"></span><br><span class="line">    k_str[len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    printk(KERN_INFO <span class="string">&quot;The origin string: %s&quot;</span>, k_str);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(start &lt; end) &#123;</span><br><span class="line">        <span class="type">char</span> temp = k_str[start];</span><br><span class="line">        k_str[start] = k_str[end];</span><br><span class="line">        k_str[end] = temp;</span><br><span class="line">        start++;</span><br><span class="line">        end--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strncpy</span>(k_revstr, k_str, <span class="keyword">sizeof</span>(k_str));</span><br><span class="line">    printk(KERN_INFO <span class="string">&quot;The reversed string: %s&quot;</span>, k_revstr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Step 2: In the unistd_64.h file, add the following code to defines the system call number for “revstr”.</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define __NR_revstr 549</span><br></pre></td></tr></table></figure><p><strong>Step 3: In the syscall_64.tbl file, add the following entry to map system call number to its corresponding function.</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">549commonrevstrsys_revstr</span><br></pre></td></tr></table></figure><p><strong>Step 4: In the syscalls.h file, add the following code to add the new system call in the header file.</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">asmlinkage long sys_revstr(int len, char __user *usr_str);</span><br></pre></td></tr></table></figure><p><strong>Step 5: Create new C code file named sys_revstr.c and add the following code:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;assert.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;sys/syscall.h&gt;</span><br><span class="line"></span><br><span class="line">#define __NR_revstr 549</span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[]) &#123;  </span><br><span class="line">    int ret1 = syscall(__NR_revstr, 5, &quot;hello&quot;);</span><br><span class="line">    assert(ret1 == 0);</span><br><span class="line"></span><br><span class="line">    int ret2 = syscall(__NR_revstr, 11, &quot;5Y573M C411&quot;);</span><br><span class="line">    assert(ret2 == 0);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Step 6: Rebuild the kernel to compile the modified kernel source code.</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p><strong>Step 7: Reinstall the kernel</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make modules_install install</span><br></pre></td></tr></table></figure><p><strong>Step 8: Reboot the kernel</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><p><strong>Step 9: Compile the sys_revstr.c file to test if the system call operates correctly.</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc sys_revstr.c -o sys_revstr</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./sys_revstr</span><br></pre></td></tr></table></figure><p><strong>Step 10: Display the output messages produced by the sys_ revstr system call.</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dmesg | tail</span><br></pre></td></tr></table></figure><p><strong>The screenshot of the results of executing sys_ revstr system call:</strong><br>       <div><br>                                            <img alt="張永義 競賽圖片" data-src="/hexo/images/OS_1/OS_3.png" /><br>                                        </div></p>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;Assignment 1: Compiling Linux Kernel and Adding Custom System Calls&lt;ul&gt;
&lt;li&gt;Compiling Linux Kernel&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Change kernel suff</summary>
      
    
    
    
    <category term="OS" scheme="https://benedict-cs.github.io/hexo/categories/OS/"/>
    
    
    <category term="OS" scheme="https://benedict-cs.github.io/hexo/tags/OS/"/>
    
    <category term="Linux Kernel" scheme="https://benedict-cs.github.io/hexo/tags/Linux-Kernel/"/>
    
  </entry>
  
  <entry>
    <title>大學畢業不是終點而是起點</title>
    <link href="https://benedict-cs.github.io/hexo/2023/11/12/university/"/>
    <id>https://benedict-cs.github.io/hexo/2023/11/12/university/</id>
    <published>2023-11-11T22:40:12.000Z</published>
    <updated>2024-07-02T14:36:25.454Z</updated>
    
    <content type="html"><![CDATA[<style>   .link{   border-bottom: 1px solid gray;   padding-bottom: 1.5px;   }   .flex-container {   display: flex;   flex-direction: row;   flex-wrap: wrap;   justify-content: center;   align-content: flex-start;   }   .item {   width: 29%;   margin: 5px;   justify-content: center;   align-items: center;   padding: 10px;   }   .item4 {   width: 28.5%;   margin: 5px;   justify-content: center;   align-items: center;   padding: 10px;   }   .item5 {   width: 36%;   margin: 5px;   justify-content: center;   align-items: center;   padding: 10px;   }   .item6 {   width: 20%;   margin: 5px;   justify-content: center;   align-items: center;   padding: 10px;   }   .item7 {   width: 19%;   margin: 2px;   justify-content: center;   align-items: center;   padding: 2px;   }   .item2 {   width: 45%;   height: 40%;   height: auto;   margin: 5px;   justify-content: center;   align-items: center;   padding: 10px;   }   @media (max-width: 768px) {   .item {   width: 98%;   }   }</style><h2 id="前言：夢想的起點"><a href="#前言：夢想的起點" class="headerlink" title="前言：夢想的起點"></a>前言：夢想的起點</h2><p>我是來自馬來西亞的僑生，懷抱著夢想和期待在2019年獨自一人來到台灣念大學。時間飛逝，四年就這樣過去了，今日我站在畢業大禮堂的門口，開始回首我的大學生活，每一步都充滿了挑戰與成長。也和大家分享我在大學的這四年是如何度過，以及發生了哪些有趣的事。</p><h2 id="學業：從陌生到領先"><a href="#學業：從陌生到領先" class="headerlink" title="學業：從陌生到領先"></a>學業：從陌生到領先</h2><p>我來台灣就讀的是<strong>國立臺北科技大學 - 互動設計系(媒體組)</strong>, 這個科系主要就是去開發一些 AR&#x2F;VR以及一些人機互動的應用，值得一提的是我在馬來西亞念的是一般高中，并不是高職背景畢業。所以老實説剛開學的時候我完全聽不懂上課的内容，加上我剛來到台灣人生地不熟，這真的是那時候蠻大的一個挑戰。我還記得我為了適應在台灣的生活以及惡補互動設計系相關的知識，我大一上學期的時候幾乎每一天都是凌晨2~3點才睡覺。但皇天不負有心人，第一學期結束了，我的成績算不錯還拿到了書卷獎。</p><p>一學期過去了，也漸漸適應了台灣的生活，學業也已經步入佳境。一切都安穩的時候，就是危險出現的時候，因為過得太安逸，時間就這也日復一日，年復一年的過去了，也有可能是疫情偷走了我的時間(藉口。不知不覺已經大四了，該修的學分都已經修完了。大部分的學生到了大三或大四的時候應該都會有一個非常迷茫的時刻，就是到底大學畢業後是要直接就業還是念研究所，以及就業要做什麽工作，若念研究所是要念什麽科系。</p><p>我自己也是思考了很久，一直找不到答案，直到我大四去實習，了解業界需求後，才有比較明確的答案，最後決定繼續念研究所，但是是完全不同的科系（這個下一篇文章會講）。但還好我的成績都有保持在前三名，所以在研究所的推甄上有比較大的優勢。這是我值得一提的大學成就，我是以GPA3.99&#x2F;4.0的成績拿到系排二(2&#x2F;82)，也獲得多次的書卷獎。</p>   <div class="flex-container">                                 <div class="item">                                    <img alt="張永義 書卷獎" data-src="/hexo/images/University/University_1.jpg" />                                    <p style="text-align: center;">書卷獎 108-1</p>                                 </div>                                 <div class="item">                                    <img alt="張永義 書卷獎" data-src="/hexo/images/University/University_2.jpg" />                                    <p style="text-align: center;">書卷獎 108-2</p>                                 </div>                                 <div class="item">                                    <img alt="張永義 書卷獎" data-src="/hexo/images/University/University_3.jpg" />                                    <p style="text-align: center;">書卷獎 109-2</p>                                 </div>                              </div><h1 id="決賽過程實習：從迷茫到確定"><a href="#決賽過程實習：從迷茫到確定" class="headerlink" title="決賽過程實習：從迷茫到確定"></a>決賽過程實習：從迷茫到確定</h1><p>不知不覺就要升大四了,這時候我開始有點慌了,因為北科大的規定是必須要在畢業前去一家公司實習滿320小時才得以畢業。所以我就開始上104人力銀行 (求職網站)瘋狂找實習，不然可能會面臨延畢的風險。這時候又面臨一個更大的難題，是關乎到未來工作的方向，因為實習總得找一個和自己未來工作性質相關的職位吧，不然就失去了實習的意義。但其實我和大家一樣，那時候的我並不知道我自己想要的工作是什麽，自己擅長的又是什麽，這或許和大學的教育制度有一點關係。</p><p>大學就是一個很自由的地方，自由到不知道自己大學四年到底學了什麽。除了必修課以外，都是上一些與專業無關的通識課程，選修課大家也都選最涼的去上，到畢業了都不知道自己學了什麽，只知道自己畢業學分夠了。而且大學的課程都很發散，每一堂課都只教你概念和基礎，比較進階或是實作的部分都是在研究所的課程。所以大學四年學完了，感覺也很難與業界接軌，因為自己掌握的專業太過發散，沒有專精的技能和實務的實作能力，這大概就是快畢業的人會有的感觸，也是我在找實習遇到的難題。</p><p>因為不知道自己適合什麽工作，所以那時候在找實習我就只鎖定在軟體工程師這類的職缺，因為我想在台灣這樣的產業結構，工程師應該會有比較好的發展，因為自己和半導體或硬體完全沒有擦邊，所以那時候只投了軟體工程師的實習，我還記得很清楚我一共投了15家軟體實習的公司。但結果如我預期的一樣，因為所學的互動設計系和我的專業和軟體工程師只能算有一點擦邊，所以基本上科技公司完全沒有回應我。只有一家紡織公司剛好他們的資訊部門有在招軟體工程師實習，也是唯一有回應我的公司。</p><p>能夠在 51份履歷中屠穎而出，得到了<strong>聚陽實業股份有限公司-資訊部</strong>所舉辦的暑期資訊營門票，我個人認為單靠我互動設計系所學和我的成績是沒有辦法讓我被入取的，我覺得有很大一部分的原因是因為我競賽所累積的實務經歷才能夠讓我得到這次的機會。我也很感謝這家公司願意給我這個機會，讓我可以接觸軟體工程這個領域，且與同期的實習生一同開發與維護前後端系統，資料庫，API，Docker以及深入了解一些軟體工程師的基本知識。在暑期實習結束後，我也有得到公司提供的預聘資格，然後我也成功談成學期實習，所以就在這家公司擔任軟體工程師實習為期一年，我大四的時間都花在了實習和畢製上。也是這次的實習讓我意識到大學所學到的知識和技能，在業界裏是完全不足夠的，所以暑假實習結束後我就馬上開始準備研究所的推甄，決定再去研究所進修一下。</p>   <div class="flex-container">                                 <div class="item">                                    <img alt="張永義 實習" data-src="/hexo/images/University/University_4.jpg" />                                    <p style="text-align: center;">聚陽資訊營</p>                                 </div>                                 <div class="item">                                    <img alt="張永義 實習" data-src="/hexo/images/University/University_5.jpg" />                                    <p style="text-align: center;">實習夥伴</p>                                 </div>                                 <div class="item">                                    <img alt="張永義 實習" data-src="/hexo/images/University/University_6.jpg" />                                    <p style="text-align: center;">結業證書</p>                                 </div>                              </div><h2 id="競賽：從平凡到精彩"><a href="#競賽：從平凡到精彩" class="headerlink" title="競賽：從平凡到精彩"></a>競賽：從平凡到精彩</h2><p>整個大學生涯裏，讓我大學生活變得不平凡的就是我的競賽經驗。我是從大二開始在老師的鼓勵下，就把專題的作品那去參加了第一次的競賽，那時候是參加全國5G通信大賽，然後有成功晉級到決賽，第一次的比賽有入圍真的非常有成就感，在接下來的大三和大四也很頻繁的參加各種競賽，且都有獲得不錯的成績。比較值得一提的是有上新聞的<b><a target="_blank"  href="https://tw.stock.yahoo.com/news/2022%E9%BB%91%E5%AE%A2%E6%9D%BE-%E6%8A%80%E8%81%B7%E7%9B%83%E5%85%A8%E5%9C%8B%E5%A4%A7%E8%B3%BD-%E7%B8%BD%E6%B1%BA%E8%B3%BD-%E5%8C%97%E7%A7%91%E5%A4%A7%E7%8D%B2-%E8%A9%95%E5%AF%A9%E5%9C%98%E5%A4%A7%E7%8D%8E-093007126.html">黑客松技職盃全國大賽獲得評審團大獎（冠軍）</a></b>，以及<b><a target="_blank"                                       href="https://www.1111.com.tw/news/jobns/151351">放視大賞獲得XR社會公益發展潛力獎</a></b>。此外，有些競賽作品也被放在<b><a target="_blank"                                       href="https://www.ideas-hatch.com/evb_share_detail.jsp?id=26">資策會的網站作為案例分享</a></b>，這個作品也曾在北、中、南區的各大學校展出。</p><h2 id="成績公布"><a href="#成績公布" class="headerlink" title="成績公布"></a>成績公布</h2><p>然後我們是等到放視開幕的時候，就知道成績了，也可以在他們的<a href="https://www.facebook.com/photo/?fbid=603072095186724&set=pb.100064518169786.-2207520000" target="_blank">fb粉專</a>查看。我們得到的是 XR社會公益發展潛力獎。</p>   <span class="up">                                 <b>得獎競賽:</b>                                 <li class="post-title4">5G通訊大賽 - 入圍數位娛樂組</li>                                 <li class="post-title4">Intel® DevCup x OpenVINO™ Toolkit - 入圍領航AI競賽</li>                                 <li class="post-title4">技職盃黑客松分區賽 - 最佳設計獎</li>                                 <li class="post-title4">技職盃黑客松全國賽 - 評審團大獎 (冠軍)</li>                                 <li class="post-title4">技職盃黑客松分區賽 - 最佳創造價值獎</li>                                 <li class="post-title4">技職盃黑客松全國賽 - 最佳簡報獎</li>                                 <li class="post-title4">放視大賞 - 入圍跨域組</li>                                 <li class="post-title4">放視大賞 - XR社會公益發展潛力獎</li>                              </span>                              <div class="flex-container">                                 <div class="item">                                    <img alt="張永義 競賽" data-src="/hexo/images/University/University_7.png" />                                    <p style="text-align: center;">2022 技職盃黑客松全國賽</p>                                 </div>                                 <div class="item">                                    <img alt="張永義 競賽" data-src="/hexo/images/University/University_8.jpg" />                                    <p style="text-align: center;">2023 技職盃黑客松全國賽</p>                                 </div>                                 <div class="item">                                    <img alt="張永義 競賽" data-src="/hexo/images/University/University_9.jpg" />                                    <p style="text-align: center;">2023 技職盃黑客松北區</p>                                 </div>                              </div>                              <div class="flex-container">                                 <div class="item">                                    <img alt="張永義 競賽" data-src="/hexo/images/University/University_10.jpg" />                                    <p style="text-align: center;">Intel® DevCup</p>                                 </div>                                 <div class="item">                                    <img alt="張永義 競賽" data-src="/hexo/images/University/University_11.jpg" />                                    <p style="text-align: center;">5G 通訊大賽</p>                                 </div>                                 <div class="item">                                    <img alt="張永義 競賽" data-src="/hexo/images/University/University_12.jpg" />                                    <p style="text-align: center;">放視大賞</p>                                 </div>                              </div><h2 id="結論：畢業不是終點而是起點"><a href="#結論：畢業不是終點而是起點" class="headerlink" title="結論：畢業不是終點而是起點"></a>結論：畢業不是終點而是起點</h2><p>回顧這四年的旅程，我感到無比自豪，這段經歷教會了我無數的生活與學習的真諦。大學期間我沒有參加任何社團活動，但我的大學生活依然精彩紛呈，最後附上一張用四年換來的畢業證書。</p><p>大學生活就此全劇終 …<br>研究生 To Be Continued …</p>   <div>                                 <img alt="張永義 學位" data-src="/hexo/images/University/University_13.jpg" />                                 <p style="text-align: center;">學位是 Bachelor of Science in Interaction Design</p>                              </div>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
   .link{
   border-bottom: 1px solid gray;
   padding-bottom: 1.5px;
   }
   .flex-container {
   display: flex;
   flex-direction:</summary>
      
    
    
    
    <category term="大學" scheme="https://benedict-cs.github.io/hexo/categories/%E5%A4%A7%E5%AD%B8/"/>
    
    
    <category term="University" scheme="https://benedict-cs.github.io/hexo/tags/University/"/>
    
  </entry>
  
  <entry>
    <title>全國賽 放視大賞 - 榮獲 XR社會公益發展潛力獎</title>
    <link href="https://benedict-cs.github.io/hexo/2023/11/11/xrpotential/"/>
    <id>https://benedict-cs.github.io/hexo/2023/11/11/xrpotential/</id>
    <published>2023-11-10T22:40:12.000Z</published>
    <updated>2024-07-02T13:27:59.247Z</updated>
    
    <content type="html"><![CDATA[<style>   .link{   border-bottom: 1px solid gray;   padding-bottom: 1.5px;   }   .flex-container {   display: flex;   flex-direction: row;   flex-wrap: wrap;   justify-content: center;   align-content: flex-start;   }   .item {   width: 29%;   margin: 5px;   justify-content: center;   align-items: center;   padding: 10px;   }   .item4 {   width: 28.5%;   margin: 5px;   justify-content: center;   align-items: center;   padding: 10px;   }   .item5 {   width: 36%;   margin: 5px;   justify-content: center;   align-items: center;   padding: 10px;   }   .item6 {   width: 20%;   margin: 5px;   justify-content: center;   align-items: center;   padding: 10px;   }   .item7 {   width: 19%;   margin: 2px;   justify-content: center;   align-items: center;   padding: 2px;   }   .item2 {   width: 45%;   height: 40%;   height: auto;   margin: 5px;   justify-content: center;   align-items: center;   padding: 10px;   }   @media (max-width: 768px) {   .item {   width: 98%;   }   }</style><h2 id="比賽簡介"><a href="#比賽簡介" class="headerlink" title="比賽簡介"></a>比賽簡介</h2><p>放視大賞（Vision Get Wild，VGW）為「數位發展部數位產業署」用心打造的創意設計節，由臺灣產學策進會執行辦理，為國內最具指標數位、設計學生創意競賽展覽，涵蓋多元領域包含：影音、動畫、遊戲、平面（傳達設計 &#x2F; 產品設計）、跨領域、AR &#x2F; VR、行動應用等領域 ，透過競賽、展覽、影展、國際論壇、交流聚會等形式，打造產學間的互動合作交流平台，每年吸引上千件作品參與競賽，更邀請到國際大師蒞臨擔任講者，如美國皮克斯公司、暴雪娛樂、拳頭遊戲等。我們所有互動系的學生都需要參加這個的比賽。</p><h2 id="備賽過程"><a href="#備賽過程" class="headerlink" title="備賽過程"></a>備賽過程</h2><p>這個比賽就是把我們的畢業製作拿去投稿，所以這個準備的過程可以說是長達一年多的時間，從一開始的專題發想，到開發，到最後的成品。</p><p>那時候的我們曾迷惘，對於資訊科跨設計領域。我不知道我的選擇是否正確，但已經走在了完全不同的道路上。 互動設計系是一個特別的科系，分為兩個組別。分別是媒體組-負責寫程式，讓遊戲跑起來，賦予漂亮的設計生命，視傳組-設計網頁、手機App介面，拉3D角色，製作2D&#x2F;3D動畫。用美感改變這個世界， 同時我們在畢業前會經由四年的磨練得到一個通用的技能，為使用者所設計。</p><p>他就像是從各種分析和角度，了解這個世界所存在的事物和規則。他的應用範圍太廣泛，因此我們統稱他為「互動」。過去，我只懂得做，看到問題解決就對了不去思考背後的原因。現在，我學會了想，一樣是解決問題，可是我知道如何從根本去解決，而不是停留在表面。</p><p>現在回望，這是大學被互動設計系所賜予最棒的禮物。一群神隊友，陪我一起參加各種競賽，在我需要時成為我的後盾。一群在背後默默支持我的老師們，每當我提出我的質疑和想法，總是熱烈擁抱。他們輕柔地接住我，給我面對這個世界所需的力量。</p><p>這次的作品是我在互動設計系完成的最後一項專題。 蓋水好行，是和臺北蓋水專案合作的作品。讓彩色人孔蓋變成AR，帶大家認識臺北的在地文化。帶著這個作品，我們經過了校內、南港展覽館、高雄展覽館得到了很棒的迴響，是一個最美的大學結尾。</p><h1 id="決賽過程"><a href="#決賽過程" class="headerlink" title="決賽過程"></a>決賽過程</h1><p>比賽的過程分成幾個階段，第一階段就是把計劃投稿，然後如果有入圍在高雄展覽館的時候才會有第二階段的評比。但我們在跨域組是只有初選入圍，所以我們在高雄展覽館就只有單純的展覽就沒有了第二階段的評比。</p><p>我們的作品是「蓋水好行」，是以AR擴增實境為表現方式，藉由水利局「臺北蓋水」彩繪人孔蓋計畫，發想一款結合觀光導覽、人文推 廣、環境維護的手機App「蓋水好行」。</p><p>我們的設計動機是因為全台有兩百多萬個人孔蓋，六成面臨老化問題。由於極端氣候，人孔蓋與路面高低差的問題加劇，造 成事故頻繁。公路局指出，此問題是道 路管理不良國賠的主因。</p><p>設計的目的是透過民眾的力量，以手機AR探索的方式走遍不同的城市，共同追蹤人孔蓋老化問題，并透過即時AR 互動及拍照功能反饋給負責單位，讓這個城市變得更加美好、安全、舒適。</p>   <div class="flex-container">                                 <div class="item7" >                                    <img alt="張永義 競賽" data-src="/hexo/images/xrpotential/6.jpg"  />                                    <p style="text-align: center;">地圖導覽</p>                                 </div>                                 <div class="item7">                                    <img alt="張永義 競賽" data-src="/hexo/images/xrpotential/7.jpg" />                                    <p style="text-align: center;">相機/AR互動</p>                                 </div>                                 <div class="item7">                                    <img alt="張永義 競賽" data-src="/hexo/images/xrpotential/8.jpg" />                                    <p style="text-align: center;">回報功能</p>                                 </div>                                 <div class="item7">                                    <img alt="張永義 競賽" data-src="/hexo/images/xrpotential/9.jpg" />                                    <p style="text-align: center;">景點推薦</p>                                 </div>                                 <div class="item7">                                    <img alt="張永義 競賽" data-src="/hexo/images/xrpotential/5.jpg" />                                    <p style="text-align: center;">收集圖鑒</p>                                 </div>                              </div><h2 id="決賽當天"><a href="#決賽當天" class="headerlink" title="決賽當天"></a>決賽當天</h2><p>XR社會公益發展潛力獎比較特別是去Meta Taiwan進行決賽，所以我們把我們的作品都帶去簡報和實際demo了。<br>    <div><br>                                 <center>  <img alt="張永義 競賽圖片" data-src="/hexo/images/xrpotential/3.jpg" width="650px" /><br>                                    <p>組員合照</p><br>                                </center><br>                               </div></p><h2 id="成績公布"><a href="#成績公布" class="headerlink" title="成績公布"></a>成績公布</h2><p>然後我們是等到放視開幕的時候，就知道成績了，也可以在他們的<a href="https://www.facebook.com/photo/?fbid=603072095186724&set=pb.100064518169786.-2207520000" target="_blank">fb粉專</a>查看。我們得到的是 XR社會公益發展潛力獎。</p>  <div>                                 <center>  <img alt="張永義 競賽圖片" data-src="/hexo/images/xrpotential/1.jpg" width="650px" />                                <p>得獎名單</p>                                </center>                               </div>                              <div>                                 <center>  <img alt="張永義 競賽圖片" data-src="/hexo/images/xrpotential/2.jpg" width="650px" />                                <p>得獎名單</p>                                </center>                               </div><h2 id="比賽收獲"><a href="#比賽收獲" class="headerlink" title="比賽收獲"></a>比賽收獲</h2><p>參加比賽的主旨是為了學習，累積經驗，有獲獎就是額外附加的價值，這次的比賽真的收穫滿滿。</p><h2 id="作品連結"><a href="#作品連結" class="headerlink" title="作品連結"></a>作品連結</h2> <p>                                <span>                                    <a href="https://gnn.gamer.com.tw/detail.php?sn=250306"                                       target="_blank">蓋水好行                                       的新聞</a>                                 </span>                              </p>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
   .link{
   border-bottom: 1px solid gray;
   padding-bottom: 1.5px;
   }
   .flex-container {
   display: flex;
   flex-direction:</summary>
      
    
    
    
    <category term="比賽" scheme="https://benedict-cs.github.io/hexo/categories/%E6%AF%94%E8%B3%BD/"/>
    
    
    <category term="competition" scheme="https://benedict-cs.github.io/hexo/tags/competition/"/>
    
    <category term="University" scheme="https://benedict-cs.github.io/hexo/tags/University/"/>
    
  </entry>
  
  <entry>
    <title>放視大賞 入圍跨域組</title>
    <link href="https://benedict-cs.github.io/hexo/2023/11/10/shortlisted/"/>
    <id>https://benedict-cs.github.io/hexo/2023/11/10/shortlisted/</id>
    <published>2023-11-09T22:40:12.000Z</published>
    <updated>2024-07-02T13:25:29.956Z</updated>
    
    <content type="html"><![CDATA[<style>   .link{   border-bottom: 1px solid gray;   padding-bottom: 1.5px;   }   .flex-container {   display: flex;   flex-direction: row;   flex-wrap: wrap;   justify-content: center;   align-content: flex-start;   }   .item {   width: 29%;   margin: 5px;   justify-content: center;   align-items: center;   padding: 10px;   }   .item4 {   width: 28.5%;   margin: 5px;   justify-content: center;   align-items: center;   padding: 10px;   }   .item5 {   width: 36%;   margin: 5px;   justify-content: center;   align-items: center;   padding: 10px;   }   .item6 {   width: 20%;   margin: 5px;   justify-content: center;   align-items: center;   padding: 10px;   }   .item7 {   width: 19%;   margin: 2px;   justify-content: center;   align-items: center;   padding: 2px;   }   .item2 {   width: 45%;   height: 40%;   height: auto;   margin: 5px;   justify-content: center;   align-items: center;   padding: 10px;   }   @media (max-width: 768px) {   .item {   width: 98%;   }   }</style><h2 id="比賽簡介"><a href="#比賽簡介" class="headerlink" title="比賽簡介"></a>比賽簡介</h2><p>放視大賞（Vision Get Wild，VGW）為「數位發展部數位產業署」用心打造的創意設計節，由臺灣產學策進會執行辦理，為國內最具指標數位、設計學生創意競賽展覽，涵蓋多元領域包含：影音、動畫、遊戲、平面（傳達設計 &#x2F; 產品設計）、跨領域、AR &#x2F; VR、行動應用等領域 ，透過競賽、展覽、影展、國際論壇、交流聚會等形式，打造產學間的互動合作交流平台，每年吸引上千件作品參與競賽，更邀請到國際大師蒞臨擔任講者，如美國皮克斯公司、暴雪娛樂、拳頭遊戲等。我們所有互動系的學生都需要參加這個的比賽。</p><h2 id="備賽過程"><a href="#備賽過程" class="headerlink" title="備賽過程"></a>備賽過程</h2><p>這個比賽就是把我們的畢業製作拿去投稿，所以這個準備的過程可以說是長達一年多的時間，從一開始的專題發想，到開發，到最後的成品。</p><p>那時候的我們曾迷惘，對於資訊科跨設計領域。我不知道我的選擇是否正確，但已經走在了完全不同的道路上。 互動設計系是一個特別的科系，分為兩個組別。分別是媒體組-負責寫程式，讓遊戲跑起來，賦予漂亮的設計生命，視傳組-設計網頁、手機App介面，拉3D角色，製作2D&#x2F;3D動畫。用美感改變這個世界， 同時我們在畢業前會經由四年的磨練得到一個通用的技能，為使用者所設計。</p><p>他就像是從各種分析和角度，了解這個世界所存在的事物和規則。他的應用範圍太廣泛，因此我們統稱他為「互動」。過去，我只懂得做，看到問題解決就對了不去思考背後的原因。現在，我學會了想，一樣是解決問題，可是我知道如何從根本去解決，而不是停留在表面。</p><p>現在回望，這是大學被互動設計系所賜予最棒的禮物。一群神隊友，陪我一起參加各種競賽，在我需要時成為我的後盾。一群在背後默默支持我的老師們，每當我提出我的質疑和想法，總是熱烈擁抱。他們輕柔地接住我，給我面對這個世界所需的力量。</p><p>這次的作品是我在互動設計系完成的最後一項專題。 蓋水好行，是和臺北蓋水專案合作的作品。讓彩色人孔蓋變成AR，帶大家認識臺北的在地文化。帶著這個作品，我們經過了校內、南港展覽館、高雄展覽館得到了很棒的迴響，是一個最美的大學結尾。</p><h1 id="決賽過程"><a href="#決賽過程" class="headerlink" title="決賽過程"></a>決賽過程</h1><p>比賽的過程分成幾個階段，第一階段就是把計劃投稿，然後如果有入圍在高雄展覽館的時候才會有第二階段的評比。但我們在跨域組是只有初選入圍，所以我們在高雄展覽館就只有單純的展覽就沒有了第二階段的評比。</p><p>我們的作品是「蓋水好行」，是以AR擴增實境為表現方式，藉由水利局「 臺北蓋水 」彩繪人孔蓋計畫，發展一款結合觀光導覽、人文 推廣、環境維護的手機App「 蓋水好行 」。</p><p>我們的設計動機是因為一個城市的美觀會直接影響在地的觀光，然而在臺北的大街小巷中隨處可見的人孔蓋卻總是髒髒黑 黑，甚至民眾會覺得是都市地雷之負面印象。</p><p>設計的目的是透過人孔蓋外觀大改造結合AR的互動，翻轉民眾對於人孔蓋的負面印象。透過實際走訪彩繪人孔蓋 設置的地點，以不同的視角去身歷其境重新地體會臺北之美。</p> <div class="flex-container">                                 <div class="item4" >                                    <img alt="張永義 競賽" data-src="/hexo/images/Shortlisted/1.jpg"  />                                    <p style="text-align: center;">彩繪人孔蓋導航</p>                                 </div>                                 <div class="item5">                                    <img alt="張永義 競賽" data-src="/hexo/images/Shortlisted/2.jpg" />                                    <p style="text-align: center;">實地AR互動體驗</p>                                 </div>                                 <div class="item6">                                    <img alt="張永義 競賽" data-src="/hexo/images/Shortlisted/3.jpg" />                                    <p style="text-align: center;">IG AR濾鏡互動</p>                                 </div>                              </div><h2 id="決賽當天"><a href="#決賽當天" class="headerlink" title="決賽當天"></a>決賽當天</h2><p>因為我們沒有晉級到決賽，所以那天我們就只是去高雄展覽館去辦展覽。<br>                            <div><br>                                 <center>  <img alt="張永義 競賽圖片" data-src="/hexo/images/Shortlisted/4.jpg" width="650px" /><br>                                    <p>組員合照</p><br>                                </center><br>                               </div></p><h2 id="成績公布"><a href="#成績公布" class="headerlink" title="成績公布"></a>成績公布</h2><p>因為第一階段的成績就只是計劃書，所以比賽的成績也是可以透過他們的<a href="https://www.facebook.com/photo/?fbid=603072095186724&set=pb.100064518169786.-2207520000" target="_blank">fb粉專</a>查看。</p> <div>                                 <center>  <img alt="張永義 競賽圖片" data-src="/hexo/images/Shortlisted/6.jpg" width="650px" />                                <p>初選名單</p>                                </center>                               </div><h2 id="比賽收獲"><a href="#比賽收獲" class="headerlink" title="比賽收獲"></a>比賽收獲</h2><p>參加比賽的主旨是為了學習，累積經驗，有獲獎就是額外附加的價值，這次的比賽真的收穫滿滿。</p><h2 id="作品連結"><a href="#作品連結" class="headerlink" title="作品連結"></a>作品連結</h2> <p>                                 <span>                                    <a href="https://www.1111.com.tw/news/jobns/151351"                                       target="_blank">蓋水好行                                       的采訪</a>                                 </span>                              </p>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
   .link{
   border-bottom: 1px solid gray;
   padding-bottom: 1.5px;
   }
   .flex-container {
   display: flex;
   flex-direction:</summary>
      
    
    
    
    <category term="比賽" scheme="https://benedict-cs.github.io/hexo/categories/%E6%AF%94%E8%B3%BD/"/>
    
    
    <category term="competition" scheme="https://benedict-cs.github.io/hexo/tags/competition/"/>
    
    <category term="University" scheme="https://benedict-cs.github.io/hexo/tags/University/"/>
    
  </entry>
  
  <entry>
    <title>全國賽 - 技職盃黑客松 最佳簡報獎</title>
    <link href="https://benedict-cs.github.io/hexo/2023/11/09/bestpresentation/"/>
    <id>https://benedict-cs.github.io/hexo/2023/11/09/bestpresentation/</id>
    <published>2023-11-08T22:40:12.000Z</published>
    <updated>2024-07-02T13:18:27.660Z</updated>
    
    <content type="html"><![CDATA[<style>   .link{   border-bottom: 1px solid gray;   padding-bottom: 1.5px;   }   .flex-container {   display: flex;   flex-direction: row;   flex-wrap: wrap;   justify-content: center;   align-content: flex-start;   }   .item {   width: 29%;   margin: 5px;   justify-content: center;   align-items: center;   padding: 10px;   }   .item4 {   width: 28.5%;   margin: 5px;   justify-content: center;   align-items: center;   padding: 10px;   }   .item5 {   width: 36%;   margin: 5px;   justify-content: center;   align-items: center;   padding: 10px;   }   .item6 {   width: 20%;   margin: 5px;   justify-content: center;   align-items: center;   padding: 10px;   }   .item7 {   width: 19%;   margin: 2px;   justify-content: center;   align-items: center;   padding: 2px;   }   .item2 {   width: 45%;   height: 40%;   height: auto;   margin: 5px;   justify-content: center;   align-items: center;   padding: 10px;   }   @media (max-width: 768px) {   .item {   width: 98%;   }   }</style><h2 id="比賽簡介"><a href="#比賽簡介" class="headerlink" title="比賽簡介"></a>比賽簡介</h2><p>這篇是續上一場分區賽的後續，所以還沒看過上一篇的可以先回去看上一篇。簡單回顧一下就是上一場分區賽我們團隊獲得了最佳創造價值獎和參加全國賽的門票，所以在5月份的時候，所有有入圍的選手，包括北，中，南的選手全部都要前往高雄的高科大參加決賽，讓我們一起看下去吧。</p><p>那其實距離分區賽到決賽的時間只有不到一個月的時間，然後黑客松基本上也算了沒辦法準備的比賽，因為比賽的題目基本上就是當天抽題。比賽的前幾天我們就先到南部玩了幾天，然後一早再搭舉辦單位 準備的接駁車前往高科大。但因為是第二次參加黑客松，我們知道比賽是9點開始就抽題了，所以我們還在接駁車的時候就先看抽題的直播，所以我們是到現場的時候看開始討論了。</p><h2 id="決賽過程"><a href="#決賽過程" class="headerlink" title="決賽過程"></a>決賽過程</h2><p>所以我們到場後，就馬上開始討論了。決賽的題目是幫助一個產業找出水足跡和碳足跡，從而幫助他們改善或是節水。這次的題目比較具體化，所以很快就有了方向。 我們的作品名稱叫做『逐水循跡』，這個作評是以科技結合永續生態工法，改建現有的溫泉水道，解決浪費水資源的問題，並透過過濾 讓這些廢水成為農作物的養分。</p><p>我們設計的動機是因為根據台灣觀光局的統計，2019年溫泉觀光業為台灣的觀光收入貢獻超過􏚳􏚱􏚱億新台幣，但大量的溫泉 廢水卻沒有妥善的處理，造成了水資源的浪費。</p><p>設計的目的是改建現有的溫泉水道，加入雨水花園或是植生過濾帶，讓有溫泉的區域獲得生態重生。以大數據動態 抓取觀光客數量預測使用水，同時根據當季盛產農作物以人工智慧的方式分配廢水。</p>  <div class="flex-container">                                 <div class="item2">                                    <img alt="張永義 競賽" data-src="/hexo/images/Best_Presentation/1.jpg" />                                    <p style="text-align: center;">作品雛形</p>                                 </div>                                 <div class="item2">                                    <img alt="張永義 競賽" data-src="/hexo/images/Best_Presentation/2.jpg" />                                    <p style="text-align: center;">網路爬蟲</p>                                 </div>                              </div><h2 id="決賽當天"><a href="#決賽當天" class="headerlink" title="決賽當天"></a>決賽當天</h2><p>和分區賽的時候一樣基本上從抽題到討論到最後的報告只有不到一天的時間，然後比賽評分分成2個幾點，第一個階段是走評，就是評審會走到你的作品前面給你90秒的時間迅速講講你的作品，這個階段是沒有QA的。第二階段就是上臺的報告，這個階段也只有3分鐘的時間，所以才說簡報非常重要，如何抓住評審的注意力，然後吧作品的理念和設計講訴給評審聼是很重要的。所以在報告前，我們組員之間就互相練習了報告很多次。<br>                             <div><br>    <center><br>                                 <iframe width="555" height="315" src="https://www.youtube.com/embed/yijLnzfK9eM?si=EvGop8xgbxVxId59" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><br>                              </center><br>                              </div></p><h2 id="成績公布"><a href="#成績公布" class="headerlink" title="成績公布"></a>成績公布</h2><p>等每一組報告完後，大概等待一個小時多的時間成績就公佈了。那很榮幸這次的作評獲得評審的青睞，讓我們拿到了最佳簡報獎。<br>                                  <center><br>                                    <iframe width="555" height="315" src="https://www.youtube.com/embed/pTiF4nUcqu8?si=NHsbIquIeSWRkNkN" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><br>                                  </center></p>   <div>                                 <center>  <img alt="張永義 競賽圖片" data-src="/hexo/images/Best_Presentation/3.jpg" width="800px" />                                <p>團隊合照</p>                                </center>                               </div><h2 id="比賽收獲"><a href="#比賽收獲" class="headerlink" title="比賽收獲"></a>比賽收獲</h2><p>參加比賽的主旨是為了學習，累積經驗，有獲獎就是額外附加的價值。這也是我最後一次參加黑客松技職盃北的競賽啦，因為我要畢業了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
   .link{
   border-bottom: 1px solid gray;
   padding-bottom: 1.5px;
   }
   .flex-container {
   display: flex;
   flex-direction:</summary>
      
    
    
    
    <category term="比賽" scheme="https://benedict-cs.github.io/hexo/categories/%E6%AF%94%E8%B3%BD/"/>
    
    
    <category term="competition" scheme="https://benedict-cs.github.io/hexo/tags/competition/"/>
    
    <category term="University" scheme="https://benedict-cs.github.io/hexo/tags/University/"/>
    
  </entry>
  
  <entry>
    <title>分區賽 - 技職盃黑客松 最佳創造價值獎</title>
    <link href="https://benedict-cs.github.io/hexo/2023/11/08/bestcreation/"/>
    <id>https://benedict-cs.github.io/hexo/2023/11/08/bestcreation/</id>
    <published>2023-11-07T22:40:12.000Z</published>
    <updated>2024-07-02T13:15:27.939Z</updated>
    
    <content type="html"><![CDATA[<style>   .link{   border-bottom: 1px solid gray;   padding-bottom: 1.5px;   }   .flex-container {   display: flex;   flex-direction: row;   flex-wrap: wrap;   justify-content: center;   align-content: flex-start;   }   .item {   width: 29%;   margin: 5px;   justify-content: center;   align-items: center;   padding: 10px;   }   .item4 {   width: 28.5%;   margin: 5px;   justify-content: center;   align-items: center;   padding: 10px;   }   .item5 {   width: 36%;   margin: 5px;   justify-content: center;   align-items: center;   padding: 10px;   }   .item6 {   width: 20%;   margin: 5px;   justify-content: center;   align-items: center;   padding: 10px;   }   .item7 {   width: 19%;   margin: 2px;   justify-content: center;   align-items: center;   padding: 2px;   }   .item2 {   width: 45%;   height: 40%;   height: auto;   margin: 5px;   justify-content: center;   align-items: center;   padding: 10px;   }   @media (max-width: 768px) {   .item {   width: 98%;   }   }</style><h2 id="比賽簡介"><a href="#比賽簡介" class="headerlink" title="比賽簡介"></a>比賽簡介</h2><p>在參加過之前多場的比賽後，現在都會自主的找比賽來參加，這是和一群在校内計算機與網路中心工讀的夥伴一起揪團參加的一個比賽，今年的比賽是在台科大舉辦。「黑客松」（Makerthon）是「自造者（Maker）」和「馬拉松（Marathon）」的結合，鼓勵全國技專校院學生實踐所學，發揮設計思考及解決問題的能力,并藉由活動的辦理協助學生思考個人在世界的角色與責任，成為負責任的世界公民，使全國技專校院學生與國際社會議題接軌， 並在解決問題的實作過程中達到發揮設計思考及解決問題的能力,以及引導學生以跨領域的合作方式，透過腦力激盪出創新的想法，落實創意。</p><h2 id="備賽過程"><a href="#備賽過程" class="headerlink" title="備賽過程"></a>備賽過程</h2><p>這個比賽畢竟叫黑客松就是一場2天一夜的比賽，所以基本上沒有所謂的備賽期，基本上題目也是當場才會知道。但是在比賽前舉辦單位會舉辦2次的培訓課程，但因為之前已經參加過培訓課程，所以今年我們團隊就沒有再報名參加培訓課程了。</p><h2 id="決賽過程"><a href="#決賽過程" class="headerlink" title="決賽過程"></a>決賽過程</h2><p>比賽當天我們就現場報道後，就等舉辦當位現場抽題。我們抽到的題目是在維護山林平衡的同時兼顧觀光，那一開始我們組員就腦力激蕩了很久，過了大半天了還是一直沒有想法，一直到當天的晚上次才有定案。那我們的作品名稱叫做『山年之中』， 這個作品」是一個藝術裝置可以讓登山者完整看到垃圾的有機物分解、腐熟，並經由時間在微生物 生化作用下，成為有機的肥料滋潤整片山林。</p><p>我們的設計動機是因為根據國際無痕山林七大法則，人為丟棄垃圾是破壞山林最大的因素。這是因為登山者對於環境保護 的知識不足。</p><p>設計的目的是以教育的角度讓登山者從感官上學習環境保護的重要性。我們以會自轉的透明垃圾桶作為展示，透 過旋轉可以加速垃圾的分解，讓登山者可以看見分解過程並從中領悟垃圾對山林造成的影響。</p>  <div class="flex-container">                                 <div class="item">                                    <img alt="張永義 競賽" data-src="/hexo/images/Best_Creation/9.jpg" />                                    <p style="text-align: center;">作品雛形</p>                                 </div>                                 <div class="item">                                    <img alt="張永義 競賽" data-src="/hexo/images/Best_Creation/2.jpg" />                                    <p style="text-align: center;">作品</p>                                 </div>                                 <div class="item">                                    <img alt="張永義 競賽" data-src="/hexo/images/Best_Creation/3.jpg" />                                    <p style="text-align: center;">比賽過程</p>                                 </div>                              </div><h2 id="決賽當天"><a href="#決賽當天" class="headerlink" title="決賽當天"></a>決賽當天</h2><p>那這個比賽是很短的比賽，所以基本上從抽題到討論到最後的報告只有不到一天的時間，我們把我的作品製作好了，就開始設計我們的簡報，我覺得設計一個好的簡報是非常重要的，比賽評分分成2個幾點，第一個階段是走評，就是評審會走到你的作品前面給你90秒的時間迅速講講你的作品，這個階段是沒有QA的。第二階段就是上臺的報告，這個階段也只有3分鐘的時間，所以才說簡報非常重要，如何抓住評審的注意力，然後吧作品的理念和設計講訴給評審聼是很重要的。所以在報告前，我們組員之間就互相練習了報告很多次。<br>                             <div><br>                                <center>  <img alt="張永義 競賽圖片" data-src="/hexo/images/Best_Creation/1.jpg" width="600px" /><br>                                    <p style="text-align: center;">作品</p><br>                               </center><br>                              </div><br>                              <div><br>                                <center>  <img alt="張永義 競賽圖片" data-src="/hexo/images/Best_Creation/4.jpg" width="600px" /><br>                                    <p style="text-align: center;">報告</p><br>                               </center><br>                              </div></p><h2 id="成績公布"><a href="#成績公布" class="headerlink" title="成績公布"></a>成績公布</h2><p>等每一組報告完後，大概等待一個小時多的時間成績就公佈了。那很榮幸這次的作評獲得評審的青睞，讓我們拿到了評審團大獎，也就是全國賽冠軍。全國大賽，由北、中、南分區賽選拔入圍計72隊團隊共204人。</p>  <div>                                 <center>  <img alt="張永義 競賽圖片" data-src="/hexo/images/Best_Creation/5.jpg" width="600px" />                                <p>團隊合照</p>                                </center>                               </div><h2 id="比賽收獲"><a href="#比賽收獲" class="headerlink" title="比賽收獲"></a>比賽收獲</h2><p>參加比賽的主旨是為了學習，累積經驗，有獲獎就是額外附加的價值。這次很高興可以拿到技職盃黑客松總決賽的門票，接下來下一章會分享全國賽的經驗。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
   .link{
   border-bottom: 1px solid gray;
   padding-bottom: 1.5px;
   }
   .flex-container {
   display: flex;
   flex-direction:</summary>
      
    
    
    
    <category term="比賽" scheme="https://benedict-cs.github.io/hexo/categories/%E6%AF%94%E8%B3%BD/"/>
    
    
    <category term="competition" scheme="https://benedict-cs.github.io/hexo/tags/competition/"/>
    
    <category term="University" scheme="https://benedict-cs.github.io/hexo/tags/University/"/>
    
  </entry>
  
  <entry>
    <title>全國賽 - 技職盃黑客松 評審團大獎 (冠軍)</title>
    <link href="https://benedict-cs.github.io/hexo/2022/11/08/champion/"/>
    <id>https://benedict-cs.github.io/hexo/2022/11/08/champion/</id>
    <published>2022-11-07T22:40:12.000Z</published>
    <updated>2024-07-02T13:08:10.937Z</updated>
    
    <content type="html"><![CDATA[<style>   .link{   border-bottom: 1px solid gray;   padding-bottom: 1.5px;   }   .flex-container {   display: flex;   flex-direction: row;   flex-wrap: wrap;   justify-content: center;   align-content: flex-start;   }   .item {   width: 29%;   margin: 5px;   justify-content: center;   align-items: center;   padding: 10px;   }   .item4 {   width: 28.5%;   margin: 5px;   justify-content: center;   align-items: center;   padding: 10px;   }   .item5 {   width: 36%;   margin: 5px;   justify-content: center;   align-items: center;   padding: 10px;   }   .item6 {   width: 20%;   margin: 5px;   justify-content: center;   align-items: center;   padding: 10px;   }   .item7 {   width: 19%;   margin: 2px;   justify-content: center;   align-items: center;   padding: 2px;   }   .item2 {   width: 45%;   height: 40%;   height: auto;   margin: 5px;   justify-content: center;   align-items: center;   padding: 10px;   }   @media (max-width: 768px) {   .item {   width: 98%;   }   }</style><h2 id="比賽簡介"><a href="#比賽簡介" class="headerlink" title="比賽簡介"></a>比賽簡介</h2><p>這篇是續上一場分區賽的後續，所以還沒看過上一篇的可以先回去看上一篇。簡單回顧一下就是上一場分區賽我們團隊獲得了最佳設計獎和參加全國賽的門票，所以在5月份的時候，所有有入圍的選手，包括北，中，南的選手全部都要前往高雄的高科大參加決賽。也可以說是我的巔峰之作，讓我們一起看下去吧。<br><br/></p><p>那其實距離分區賽到決賽的時間只有不到一個月的時間，然後黑客松基本上也算了沒辦法準備的比賽，因為比賽的題目基本上就是當天抽題。比賽的前一晚我們就先到高雄火車站附近住了一個晚上，然後一早就搭舉辦單位準備的接駁車前往高科大。但因為是第一次參加黑客松，我們不知道因為比賽是9點開始就抽題了，所以我們還在接駁車的時候就已經抽完題目了。但其實我們完全不知道，所以我們是到現場的時候看到大家都已經開始在討論，才知道原來題目早就抽完了。</p><h2 id="決賽過程"><a href="#決賽過程" class="headerlink" title="決賽過程"></a>決賽過程</h2><p> 所以我們到場後，就馬上開始討論了。決賽的題目是改善空氣污染，那我們知道如果都做戶外的空氣污染肯定會和大家想的都非常類似，所以我們把我們的題目鎖定在了室内污染。我們的作品名稱叫做『綠窗花』，我們以現有的技術結合人本設計，發想出從個人到整個社區的清淨空氣行動。綠窗花這個作品參考台灣的傳統美學，以窗花為形體，結合微藻網製作出淨化PM2.5的工具。」當微藻網髒掉需要汰換時，可以把它收集起來二次利用當作堆肥，實現環保及永續發展。此外，人們也可透過綠窗花交換植物，並以手機即時觀看社區及家中PM2.5的濃度。從生活開始改變居家行為與空間，鼓勵整個社區一起推動綠化。<br><br/><br/><br>那因為這一次我們比較快就決定好要做的題目，所以很快就可以開始動工了，所以這一次的作品也比較完整，技術涵蓋鐳射切割，3D列印，手機App和後端資料庫來存感應器的資料。<br> <div class="flex-container"><br>                                 <div class="item"><br>                                    <img alt="張永義 競賽" data-src="/hexo/images/National_Makerthon/National_Makerthon_1.jpg" /><br>                                    <p style="text-align: center;">討論</p><br>                                 </div><br>                                 <div class="item"><br>                                    <img alt="張永義 競賽" data-src="/hexo/images/National_Makerthon/National_Makerthon_2.jpg" /><br>                                    <p style="text-align: center;">簡報</p><br>                                 </div><br>                                 <div class="item"><br>                                    <img alt="張永義 競賽" data-src="/hexo/images/National_Makerthon/National_Makerthon_3.jpg" /><br>                                    <p style="text-align: center;">作品</p><br>                                 </div><br>                              </div></p><h2 id="決賽當天"><a href="#決賽當天" class="headerlink" title="決賽當天"></a>決賽當天</h2><p>和分區賽的時候一樣基本上從抽題到討論到最後的報告只有不到一天的時間，然後比賽評分分成2個幾點，第一個階段是走評，就是評審會走到你的作品前面給你90秒的時間迅速講講你的作品，這個階段是沒有QA的。第二階段就是上臺的報告，這個階段也只有3分鐘的時間，所以才說簡報非常重要，如何抓住評審的注意力，然後吧作品的理念和設計講訴給評審聼是很重要的。所以在報告前，我們組員之間就互相練習了報告很多次。<br>    <div><br>                                <center><br>                                <iframe width="555" height="315" src="https://www.youtube.com/embed/NeS3v8Ep8ro?si=mtzHIwff9nu8tDcK" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><br>                              </center><br>                              <center>  <img alt="張永義 競賽圖片" data-src="/hexo/images/National_Makerthon/National_Makerthon_4.jpg"  /><br>                                 <p>報告時間</p><br>                                 </center><br>                              </div></p><h2 id="成績公布"><a href="#成績公布" class="headerlink" title="成績公布"></a>成績公布</h2><p>等每一組報告完後，大概等待一個小時多的時間成績就公佈了。那很榮幸這次的作評獲得評審的青睞，讓我們拿到了評審團大獎，也就是全國賽冠軍。全國大賽，由北、中、南分區賽選拔入圍計72隊團隊共204人。</p> <center>                                    <iframe width="555" height="315" src="https://www.youtube.com/embed/j6OQ_Yl5cW0?si=zrv4IRkzl4fDPLia" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>                                  </center>                                    <div>                                 <center>  <img alt="張永義 競賽圖片" data-src="/hexo/images/National_Makerthon/National_Makerthon_5.jpg" />                                <p>團隊合照</p>                                </center>                               </div><h2 id="比賽收獲"><a href="#比賽收獲" class="headerlink" title="比賽收獲"></a>比賽收獲</h2><p>參加比賽的主旨是為了學習，累積經驗，有獲獎就是額外附加的價值。這次很高興可以拿到技職盃黑客松總決賽的門票。也有幸可以參加企業的培訓課程，這次的比賽真的收穫滿滿。接下來下一章會分享全國賽的經驗。</p>  <div class="flex-container">                                 <div class="item2">                                    <img alt="張永義 競賽圖片" data-src="/hexo/images/National_Makerthon/National_Makerthon_6.png" width="400px" />                                    <p style="text-align: center;">yahoo 新聞</p>                                 </div>                                 <div class="item2">                                    <img alt="張永義 競賽圖片" data-src="/hexo/images/National_Makerthon/National_Makerthon_7.png" width="400px" />                                    <p style="text-align: center;">僑務電子報</p>                                 </div>                              </div>                              <div class="flex-container">                                 <div class="item2">                                    <img alt="張永義 競賽圖片" data-src="/hexo/images/National_Makerthon/National_Makerthon_8.png" width="400px" />                                    <p style="text-align: center;">中時新聞網</p>                                 </div>                                 <div class="item2">                                    <img alt="張永義 競賽圖片" data-src="/hexo/images/National_Makerthon/National_Makerthon_9.png" width="400px" />                                    <p style="text-align: center;">北科新聞</p>                                 </div>                              </div><h2 id="作品連結"><a href="#作品連結" class="headerlink" title="作品連結"></a>作品連結</h2>   <p>                                  <span><a href="https://www.youtube.com/watch?v=CWzgJUxlcRA"                                          target="_blank">綠窗花                                          作品</a></span>                                  <br />                                  <span>                                      <a href="https://ocacnews.net/article/310164" target="_blank">綠窗花 報導</a>                                  </span>                                  <br />                                  <span>                                    <a href="https://news.ntut.edu.tw/p/404-1000-119140.php" target="_blank">綠窗花 報導</a>                                </span>                                <br />                             <span>                              <a href="https://www.chinatimes.com/campus/20220516004068-262301?chdtv" target="_blank">綠窗花 報導</a>                          </span>                          <br />                          <span>                           <a href="https://tw.news.yahoo.com/2022%E9%BB%91%E5%AE%A2%E6%9D%BE-%E6%8A%80%E8%81%B7%E7%9B%83%E5%85%A8%E5%9C%8B%E5%A4%A7%E8%B3%BD-%E7%B8%BD%E6%B1%BA%E8%B3%BD-%E5%8C%97%E7%A7%91%E5%A4%A7%E7%8D%B2-%E8%A9%95%E5%AF%A9%E5%9C%98%E5%A4%A7%E7%8D%8E-093007126.html" target="_blank">綠窗花 報導</a>                       </span>                       <br />                       <span>                        <a href="https://www.edu.tw/News_Content.aspx?n=9E7AC85F1954DDA8&s=4C62A628BACE6D84" target="_blank">綠窗花 報導</a>                    </span>                              </p>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
   .link{
   border-bottom: 1px solid gray;
   padding-bottom: 1.5px;
   }
   .flex-container {
   display: flex;
   flex-direction:</summary>
      
    
    
    
    <category term="比賽" scheme="https://benedict-cs.github.io/hexo/categories/%E6%AF%94%E8%B3%BD/"/>
    
    
    <category term="competition" scheme="https://benedict-cs.github.io/hexo/tags/competition/"/>
    
    <category term="University" scheme="https://benedict-cs.github.io/hexo/tags/University/"/>
    
  </entry>
  
  <entry>
    <title>分區賽 - 技職盃黑客松 最佳設計獎</title>
    <link href="https://benedict-cs.github.io/hexo/2022/11/07/bestdesign/"/>
    <id>https://benedict-cs.github.io/hexo/2022/11/07/bestdesign/</id>
    <published>2022-11-06T22:40:12.000Z</published>
    <updated>2024-07-01T12:45:55.418Z</updated>
    
    <content type="html"><![CDATA[<style>   .link{   border-bottom: 1px solid gray;   padding-bottom: 1.5px;   }   .flex-container {   display: flex;   flex-direction: row;   flex-wrap: wrap;   justify-content: center;   align-content: flex-start;   }   .item {   width: 29%;   margin: 5px;   justify-content: center;   align-items: center;   padding: 10px;   }   .item4 {   width: 28.5%;   margin: 5px;   justify-content: center;   align-items: center;   padding: 10px;   }   .item5 {   width: 36%;   margin: 5px;   justify-content: center;   align-items: center;   padding: 10px;   }   .item6 {   width: 20%;   margin: 5px;   justify-content: center;   align-items: center;   padding: 10px;   }   .item7 {   width: 19%;   margin: 2px;   justify-content: center;   align-items: center;   padding: 2px;   }   .item2 {   width: 45%;   height: 40%;   height: auto;   margin: 5px;   justify-content: center;   align-items: center;   padding: 10px;   }   @media (max-width: 768px) {   .item {   width: 98%;   }   }</style><h2 id="比賽簡介"><a href="#比賽簡介" class="headerlink" title="比賽簡介"></a>比賽簡介</h2><p> 在參加過前2場比賽後，現在都會自主的找比賽來參加，這是和一群在校内計算機與網路中心工讀的夥伴一起揪團參加的一個比賽。因為這個比賽今年是在北科大舉辦,在校園其實都看到這個比賽的資訊，所以我們就報名。「黑客松」（Makerthon）是「自造者（Maker）」和「馬拉松（Marathon）」的結合，鼓勵全國技專校院學生實踐所學，發揮設計思考及解決問題的能力,并藉由活動的辦理協助學生思考個人在世界的角色與責任，成為負責任的世界公民，使全國技專校院學生與國際社會議題接軌，並在解決問題的實作過程中達到發揮設計思考及解決問題的能力,以及引導學生以跨領域的合作方式，透過腦力激盪出創新的想法，落實創意。這個比賽沒有官方網站，要看當年是哪一個學校舉辦，我們這一年是由北科大的育成中心舉辦，所以詳情可以至<a href="https://incu.ntut.edu.tw/p/404-1038-116360.php?Lang=zh-tw" target="_blank">北科育成中心</a>查看。</p><h2 id="備賽過程"><a href="#備賽過程" class="headerlink" title="備賽過程"></a>備賽過程</h2><p>這個比賽畢竟叫黑客松就是一場2天一夜的比賽，所以基本上沒有所謂的備賽期，基本上題目也是當場才會知道。但是在比賽前舉辦單位會舉辦2次的培訓課程，可參考<a href="https://incu.ntut.edu.tw/p/404-1038-116829.php?Lang=zh-tw" target="_blank"> 北科育成中心</a>的簡介。培訓的主題涵蓋「3D設計讓您由想像到實現」 以及「語音辨識硬體程式讓你無痛入門」,從0開始帶你利用3D列印的技術結合開發板把留聲機實作出來。</p>  <div>                                  <center>  <img alt="張永義 競賽圖片" data-src="/hexo/images/Zone_Makerthon/Zone_Makerthon_1.png" width="300px" />                                 <p>自製留聲機</p>                                 </center>                                </div><h2 id="決賽過程"><a href="#決賽過程" class="headerlink" title="決賽過程"></a>決賽過程</h2><p> 比賽當天我們就現場報道後，就等舉辦當位現場抽題。我們抽到的題目是改善水汙染，那一開始我們組員就腦力激蕩了很久，過了大半天了還是一直沒有想法，一直到當天的晚上次才有定案。那我們的作品名稱叫做『河的快篩』，主要是仿生姥鯊的特性去完成河道的垃圾清理。#姥鯊 身體特殊的結構，可將吸入海水內的不必要內容物透過『鰓』排除在外，因此我們參考這個功能，融合我們的作品，當河道內的垃圾進入類似濾心的構造中，河中的生物會經由『腮』的構造離開，而垃圾會留從另外一個管道送走。我們這次使用主辦單位提供的3D列印技術進行『仿生腮』的設計，結合國產的TINKA作為雛形，在比賽開始前，主辦單位開課教導簡易的程式語言，也將所學的融合在我們的作品之中。</p><p>比賽的過程除了三餐的提供還有很多的點心可以吃，基本上不太會餓到。當然大家的體力還是有限，所以半夜不敵睡意的參賽選手們還是有小小休息一下繼續趕工。<br>     <div class="flex-container"><br>                                 <div class="item"><br>                                    <img alt="張永義 競賽" data-src="/hexo/images/Zone_Makerthon/Zone_Makerthon_2.png" /><br>                                    <p style="text-align: center;">點心</p><br>                                 </div><br>                                 <div class="item"><br>                                    <img alt="張永義 競賽" data-src="/hexo/images/Zone_Makerthon/Zone_Makerthon_3.png" /><br>                                    <p style="text-align: center;">泡麵和飲料</p><br>                                 </div><br>                                 <div class="item"><br>                                    <img alt="張永義 競賽" data-src="/hexo/images/Zone_Makerthon/Zone_Makerthon_4.JPG" /><br>                                    <p style="text-align: center;">休息的參賽者</p><br>                                 </div><br>                              </div></p><h2 id="決賽當天"><a href="#決賽當天" class="headerlink" title="決賽當天"></a>決賽當天</h2><p> 那這個比賽是很短的比賽，所以基本上從抽題到討論到最後的報告只有不到一天的時間，我們把我的作品製作好了，就開始設計我們的簡報，我覺得設計一個好的簡報是非常重要的，比賽評分分成2個幾點，第一個階段是走評，就是評審會走到你的作品前面給你90秒的時間迅速講講你的作品，這個階段是沒有QA的。第二階段就是上臺的報告，這個階段也只有3分鐘的時間，所以才說簡報非常重要，如何抓住評審的注意力，然後吧作品的理念和設計講訴給評審聼是很重要的。所以在報告前，我們組員之間就互相練習了報告很多次。<br>    <div class="flex-container"><br>                                 <div class="item"><br>                                    <img alt="張永義 競賽" data-src="/hexo/images/Zone_Makerthon/Zone_Makerthon_5.jpg" /><br>                                    <p style="text-align: center;">討論過程</p><br>                                 </div><br>                                 <div class="item"><br>                                    <img alt="張永義 競賽" data-src="/hexo/images/Zone_Makerthon/Zone_Makerthon_6.jpg" /><br>                                    <p style="text-align: center;">3D 列印</p><br>                                 </div><br>                                 <div class="item"><br>                                    <img alt="張永義 競賽" data-src="/hexo/images/Zone_Makerthon/Zone_Makerthon_7.png" /><br>                                    <p style="text-align: center;">作品雛形</p><br>                                 </div><br>                              </div></p><h2 id="成績公布"><a href="#成績公布" class="headerlink" title="成績公布"></a>成績公布</h2><p>等每一組報告完後，大概等待一個小時多的時間成績就公佈了。那很榮幸這次的作評獲得評審的青睞，讓我們拿到了最佳設計獎。那這個比賽一共會5個入選，10個佳作，以及最佳人氣獎，最佳創造價值獎，最佳設計獎，最佳簡報獎，最佳創意獎，最佳技術獎，評審團大獎各一個晉級至決賽到高科大進行決賽。那決賽會是在差不多一個月後舉辦，然後高鐵的費用學校會補助。</p>   <div>                                 <center>  <img alt="張永義 競賽圖片" data-src="/hexo/images/Zone_Makerthon/Zone_Makerthon_8.jpg" width="500px" />                                <p>團隊合照</p>                                </center>                               </div><h2 id="比賽收獲"><a href="#比賽收獲" class="headerlink" title="比賽收獲"></a>比賽收獲</h2><p> 參加比賽的主旨是為了學習，累積經驗，有獲獎就是額外附加的價值。這次很高興可以拿到技職盃黑客松總決賽的門票。也有幸可以參加企業的培訓課程，這次的比賽真的收穫滿滿。接下來下一章會分享全國賽的經驗。也感謝「北科新聞 IM Lab 創媒實驗室」的采訪和提供的照片。</p>   <div>                                 <center>  <img alt="張永義 競賽圖片" data-src="/hexo/images/Zone_Makerthon/Zone_Makerthon_9.png" width="450px" />                                <p>創媒實驗室提供的照片</p>                                </center>                               </div><h2 id="作品連結"><a href="#作品連結" class="headerlink" title="作品連結"></a>作品連結</h2>  <p>                                  <span><a href="https://youtu.be/dvGTROcbx-U?si=zFptyoqcFBMCvBjf"                                          target="_blank">河的快篩 動畫示意</a></span>                                  <br />                                  <span>                                      <a href="https://incu.ntut.edu.tw/p/404-1038-118434.php?Lang=zh-tw" target="_blank">河的快篩 成果欣賞</a>                                  </span>                                  <br />                                  <span>                                    <a href="https://www.facebook.com/photo/?fbid=362414349248649&set=a.351730486983702" target="_blank">河的快篩 的采訪</a>                                </span>                              </p>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
   .link{
   border-bottom: 1px solid gray;
   padding-bottom: 1.5px;
   }
   .flex-container {
   display: flex;
   flex-direction:</summary>
      
    
    
    
    <category term="比賽" scheme="https://benedict-cs.github.io/hexo/categories/%E6%AF%94%E8%B3%BD/"/>
    
    
    <category term="competition" scheme="https://benedict-cs.github.io/hexo/tags/competition/"/>
    
    <category term="University" scheme="https://benedict-cs.github.io/hexo/tags/University/"/>
    
  </entry>
  
  <entry>
    <title>全國賽 - Intel® DevCup x OpenVINO™ Toolkit 入圍</title>
    <link href="https://benedict-cs.github.io/hexo/2021/11/07/intel/"/>
    <id>https://benedict-cs.github.io/hexo/2021/11/07/intel/</id>
    <published>2021-11-06T22:40:12.000Z</published>
    <updated>2024-07-01T12:26:03.754Z</updated>
    
    <content type="html"><![CDATA[<style>   .link{   border-bottom: 1px solid gray;   padding-bottom: 1.5px;   }   .flex-container {   display: flex;   flex-direction: row;   flex-wrap: wrap;   justify-content: center;   align-content: flex-start;   }   .item {   width: 29%;   margin: 5px;   justify-content: center;   align-items: center;   padding: 10px;   }   .item4 {   width: 28.5%;   margin: 5px;   justify-content: center;   align-items: center;   padding: 10px;   }   .item5 {   width: 36%;   margin: 5px;   justify-content: center;   align-items: center;   padding: 10px;   }   .item6 {   width: 20%;   margin: 5px;   justify-content: center;   align-items: center;   padding: 10px;   }   .item7 {   width: 19%;   margin: 2px;   justify-content: center;   align-items: center;   padding: 2px;   }   .item2 {   width: 45%;   height: 40%;   height: auto;   margin: 5px;   justify-content: center;   align-items: center;   padding: 10px;   }   @media (max-width: 768px) {   .item {   width: 98%;   }   }</style><h2 id="比賽簡介"><a href="#比賽簡介" class="headerlink" title="比賽簡介"></a>比賽簡介</h2><p>這是續上一篇參加過5G通訊大賽後，我參加的第二個比賽。那這個比賽的資訊是從我們程式設計課的老師哪裏得知的。老師說只要報名參加這個比賽就可以加分，所以我們組就報名參加了這次的比賽。我們參加的是首届「Intel DevCup x OpenVINO Toolkit」競賽，比賽的主旨是以推動AI作為主軸。讓參賽者們可以掌握容易上手的Edge AI推論佈建及維護工具，並號召全台AI高手與新手們同台競技，除琢磨AI實力外，也是優秀人才交流、切磋的場合，為台灣AI市場注入更多創新動能。比賽分成「實作組」及「概念組」，實作組需要著重研發實作，且繳交作品原型，並於決賽期間進行驗證；而概念組則需發想AI的創新應用情境，著重創新構想，並提交概念企畫提案書即可。我報名的是概念組。更多詳細的競賽資訊可以至通訊大賽<a href="https://makerpro.cc/intel-devcup/" target="_blank">官網</a>查詢。</p><h2 id="備賽過程"><a href="#備賽過程" class="headerlink" title="備賽過程"></a>備賽過程</h2><p>這個比賽7月就開放報名和下載參賽文件，實作組及概念組初選皆是以繳交企畫提案書進行參賽且需在10月時完成。我們團體在這短短的3個裡，從創意發想到雛形製作，再來到概念的驗證。在這過程中比較可惜是剛好遇到疫情嚴峻的時候，所有很多的討論也被迫改為線上參與。線上討論讓我們更難地將自己的想法表達出來和缺乏了討論的互動。但這不影響我們參賽的熱忱，在我們的努力與奮鬥下Tidy就此誕生。</p><p>Tidy這個作品核心的價值就是利用AI辨識所拍攝的房間後，將提供客製化的整理建議。讓毫無頭緒的你知道該如何開始。減輕大家的整理壓力，讓人更願意動手收拾。我們的作品和想法在初賽的時候也受到評審們的肯定，讓我們成功晉級至決賽。概念組會挑選出60隊晉級至決賽，而實作組選出20組晉級決賽。入圍名單會在11月中的時候以Email的方式通知，也可以到他們的<a href="https://makerpro.cc/intel-devcup/shortlisted-teams/" target="_blank">官網</a>或<a href="https://www.facebook.com/photo/?fbid=283949050248788&set=pcb.283949326915427" target="_blank">FB</a>查看,我們組叫「北科互動力火車」,入圍的隊伍都可以拿到一個 Intel提供的 Neural Compute Stick 2用在後續的開發上。</p><div>   <img alt="張永義 競賽圖片" data-src="/hexo/images/Intel/Intel_1.jpg" /></div><div class="flex-container">   <div class="item">      <img alt="張永義 競賽" data-src="/hexo/images/Intel/Intel_2.jpg" />      <p style="text-align: center;">入圍名單</p>   </div>   <div class="item">      <img alt="張永義 競賽" data-src="/hexo/images/Intel/Intel_3.jpg" />      <p style="text-align: center;">入圍外套</p>   </div>   <div class="item">      <img alt="張永義 競賽" data-src="/hexo/images/Intel/Intel_4.jpg" />      <p style="text-align: center;">Intel 神經運算棒</p>   </div></div><h2 id="入圍之後"><a href="#入圍之後" class="headerlink" title="入圍之後"></a>入圍之後</h2><p>入圍團隊皆可參加主辦單位提供的3次充電課程，以補充團隊們對OpenVino 和 AI 相關的知識，主題包括:「使用Intel OpenVINO在PC上學AI」,「如何善用OpenVINO模型優化器與推論引擎」,「OpenVINO好用Tool Overview介紹」。但因為疫情的關係所有的課程皆改為線上進行。比賽最大的價值就是可以參加企業所提供的優質課程學習最新的技術，這是在學校比較沒有機會接觸到的。</p><h2 id="決賽過程"><a href="#決賽過程" class="headerlink" title="決賽過程"></a>決賽過程</h2><p>所有的入選團隊,無論是「實作組」或「概念組」皆需再繳交一份完整的成果報告已經3-5分鐘的Demo影片。所以我們團隊就利用主辦方提供的 Intel Neural Compute Stick 2 以及充電課程所學習到的知識，去把我們的想法去實作出來。雖然我們報名的是概念組，但為了驗證我們Tidy的概念，我們還是將Tidy的作品雛形製作了出來。</p><div>   <img alt="張永義 競賽圖片" data-src="/hexo/images/Intel/Intel_5.jpg" />   <p style="text-align: center;">訓練結果</p></div><h2 id="決賽當天"><a href="#決賽當天" class="headerlink" title="決賽當天"></a>決賽當天</h2><p>在準備了4個月後，我的到了台北華山1914文化創意產業園區進行決賽。那天有入圍的團隊到現場，實作組的需要帶著作品到會場實際demo，然後會有評審進行評分。概念組的這是以demo影片和繳交的成果簡報作為最後決賽的評分。除此之外還會有人氣獎的投票,可以至比賽<a href="https://makerpro.cc/intel-devcup/tidy" target="_blank">官網人氣投票區</a>進行投票。那天除了是決賽同時也是頒獎典禮，比賽後直接宣佈成績，所以那天有入圍的所有選手都可以得到一件主辦方(intel)發的帽T外套(挺好看的。</p><div>   <center><img alt="張永義 競賽圖片" data-src="/hexo/images/Intel/Intel_6.jpg" width="550px" />   </center></div><h2 id="成績公布"><a href="#成績公布" class="headerlink" title="成績公布"></a>成績公布</h2><p>就如前面提到，決賽當天也是頒獎典禮所以，當下就會知道成績。雖然很遺憾沒有獲獎，但我們能夠在258隊中獲得入圍也算是相當不錯的經驗了。</p><div>   <img alt="張永義 競賽圖片" data-src="/hexo/images/Intel/Intel_7.jpg" /></div><h2 id="比賽收獲"><a href="#比賽收獲" class="headerlink" title="比賽收獲"></a>比賽收獲</h2><p>參加比賽的主旨是為了學習，累積經驗，有獲獎就是額外附加的價值。這次很高興可以入圍全國首屆「Intel DevCup x OpenVINO Toolkit」競賽的總決賽。也有幸可以參加Intel的企業充電課程，這次的比賽真的收穫滿滿。這是我在台灣參加的第二場比賽，但我相信接下來我還會繼續參加更多的比賽。</p><div>   <img alt="張永義 競賽圖片" data-src="/hexo/images/Intel/Intel_8.jpg" />   <p style="text-align: center;">團隊合照   </p></div><h2 id="作品連結"><a href="#作品連結" class="headerlink" title="作品連結"></a>作品連結</h2><p>   <span><a href="https://www.youtube.com/watch?v=plMc42bjYbQ"      target="_blank">Tidy 成果影片</a></span>   <br />   <span>   <a href="https://makerpro.cc/intel-devcup/tidy" target="_blank">Tidy 在Intel Devcup作為案例分享</a>   </span></p>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
   .link{
   border-bottom: 1px solid gray;
   padding-bottom: 1.5px;
   }
   .flex-container {
   display: flex;
   flex-direction:</summary>
      
    
    
    
    <category term="比賽" scheme="https://benedict-cs.github.io/hexo/categories/%E6%AF%94%E8%B3%BD/"/>
    
    
    <category term="competition" scheme="https://benedict-cs.github.io/hexo/tags/competition/"/>
    
    <category term="University" scheme="https://benedict-cs.github.io/hexo/tags/University/"/>
    
  </entry>
  
  <entry>
    <title>全國賽 - 5G通訊大賽 入圍</title>
    <link href="https://benedict-cs.github.io/hexo/2021/11/06/mobilehero/"/>
    <id>https://benedict-cs.github.io/hexo/2021/11/06/mobilehero/</id>
    <published>2021-11-05T22:40:12.000Z</published>
    <updated>2024-07-01T12:25:55.034Z</updated>
    
    <content type="html"><![CDATA[<style>.link{            border-bottom: 1px solid gray;            padding-bottom: 1.5px;}.flex-container {    display: flex;    flex-direction: row;    flex-wrap: wrap;    justify-content: center;    align-content: flex-start;}.item {    width: 29%;    margin: 5px;    justify-content: center;    align-items: center;    padding: 10px;}.item4 {    width: 28.5%;    margin: 5px;    justify-content: center;    align-items: center;    padding: 10px;}.item5 {    width: 36%;    margin: 5px;    justify-content: center;    align-items: center;    padding: 10px;}.item6 {    width: 20%;    margin: 5px;    justify-content: center;    align-items: center;    padding: 10px;}.item7 {    width: 19%;    margin: 2px;    justify-content: center;    align-items: center;    padding: 2px;}.item2 {    width: 45%;    height: 40%;    height: auto;    margin: 5px;    justify-content: center;    align-items: center;    padding: 10px;}@media (max-width: 768px) {    .item {        width: 98%;    }}    </style><h2 id="比賽簡介"><a href="#比賽簡介" class="headerlink" title="比賽簡介"></a>比賽簡介</h2><p>我是從專題老師得知比賽的資訊，我大二的時候去參加全國5G通訊大賽。這個比賽每年都會舉辦，主旨是以發展5G解決方案為主軸。聚焦於數位娛樂、交通、製造三大垂直領域。比賽分成「實作組」及「概念組」，實作組需要著重研發實作，且繳交作品原型，並於5G實驗場域進行驗證；而概念組則需發想5G創新應用情境，著重創新構想，並提交概念企畫提案書即可。我報名的是概念組選擇的是數位娛樂領域。更多詳細的競賽資訊可以至 通訊大賽<a class="link" href="https://mobilehero.com/zh-Hant/fivegplus" target="_blank">官網</a>查詢。</p><h2 id="備賽過程"><a href="#備賽過程" class="headerlink" title="備賽過程"></a>備賽過程</h2><p>這個比賽4月就開放報名和下載參賽文件，實作組及概念組初選皆是以繳交企畫提案書進行參賽且需在7月時完成。我們團體在這短短的3個裡，從創意發想到雛形製作，再來到概念的驗證。在這過程中比較可惜是剛好遇到疫情最嚴峻的時候，所有的討論也被迫改為線上參與。線上討論讓我們更難地將自己的想法表達出來和缺乏了討論的互動。但這不影響我們參賽的熱忱，在我們的努力與奮鬥下TintFull就此誕生。</p><div class="flex-container">    <div class="item">        <img alt="張永義 競賽" data-src="/hexo/images/Mobilehero/Mobilehero_1.jpg" />        <p style="text-align: center;">設計稿規劃</p>    </div>    <div class="item">        <img alt="張永義 競賽" data-src="/hexo/images/Mobilehero/Mobilehero_2.jpg" />        <p style="text-align: center;">3D 建模</p>    </div>    <div class="item">        <img alt="張永義 競賽" data-src="/hexo/images/Mobilehero/Mobilehero_3.jpg" />        <p style="text-align: center;">雛形測試</p>    </div></div><p>TintFull這個作品核心的價值就是透過物聯網（IoT）讓人在疫情下仍然可以彼此產生連接。我們的作品和想法在初賽的時候也受到評審們的肯定，讓我們成功晉級至決賽。概念組的每一個領域都會挑選出10組晉級決賽，而實作組則是不分領域選出10組晉級決賽。入圍名單 會在9月初的時候以Email的方式通知，也可以到他們的官網或ig上查看。</p> <div>                                            <img alt="張永義 競賽圖片" data-src="/hexo/images/Mobilehero/Mobilehero_4.jpg" />                                            <p style="text-align: center;">評審建議</p>                                        </div><h2 id="入圍之後"><a href="#入圍之後" class="headerlink" title="入圍之後"></a>入圍之後</h2><p>入圍團隊皆可參加主辦單位提供的充電課程和企業參訪，以補充團隊們對5G的知識。但除了企業參訪是到實地走訪以外，所有的課程因為疫情的關係皆改為線上進行。這次很榮幸可以參加中華電信（主辦方）的企業參訪。我們到了中華電信的總部去參觀中華電信把5G技術實際應用在生活中的產品。其中包括無人機，智慧醫療，智慧農場，AR，VR的領域。比賽最大的價值就是可以參加企業所提供的優質課程以及企業參訪的機會，這是在學校比較沒有機會接觸到的。<br>                                        <div class="flex-container"><br>                                            <div class="item"><br>                                                <img alt="張永義 競賽" data-src="/hexo/images/Mobilehero/Mobilehero_5.jpg" /><br>                                                <p style="text-align: center;">實地參訪</p><br>                                            </div><br>                                            <div class="item"><br>                                                <img alt="張永義 競賽" data-src="/hexo/images/Mobilehero/Mobilehero_6.jpg" /><br>                                                <p style="text-align: center;">實地參訪</p><br>                                            </div><br>                                            <div class="item"><br>                                                <img alt="張永義 競賽" data-src="/hexo/images/Mobilehero/Mobilehero_7.jpg" /><br>                                                <p style="text-align: center;">應用展示</p><br>                                            </div><br>                                        </div></p><h2 id="決賽過程"><a href="#決賽過程" class="headerlink" title="決賽過程"></a>決賽過程</h2><p>在充電課程與企業參訪後，我們對5G的領域更加了解了。所以我們就將吸收到的5G知識應用在我們的作品TintFull上。雖然我們報名的是概念組，但為了驗證我們TintFull的概念，我們還是將TintFull的作品雛形製作了出來。我們在看過評審們給的評語後，我們TintFull的方向開始往「如何在疫情之下透過5G帶來的即時性互動，拉近人與人之間的距離」改善。</p><h2 id="決賽當天"><a href="#決賽當天" class="headerlink" title="決賽當天"></a>決賽當天</h2><p>在10月的時候我的到了台北digiBlock數位創新基地會場進行決賽。那天有入圍的團隊會輪流進場報告，還沒輪到的團隊只能在等候區等待叫號。因為疫情的關係，這次的決賽沒有觀眾唯有評審們（約7-9人）會進行現場的評分和提問。輪到我們的時候我們就像練習的時候一樣地報告，報告後評審們會提問。決賽結束後我們就離開了會場，成績會在決賽後的一週後以Email的方式公佈。</p><h2 id="成績公布"><a href="#成績公布" class="headerlink" title="成績公布"></a>成績公布</h2><p>11月的時候公佈了獲獎名單，很遺憾這次沒有得獎。但我自己有反思落選的原因，我認為這次落選最大的原因是因為我們報名的是數位娛樂組，但在決賽的時候我們強調的是TintFull「如何在疫情之下透過5G帶來的即時性互動拉近人與人之間的距離」，而缺乏了互動的娛樂性，導致我們的作品失焦，失去了作品的核心價值。</p><h2 id="比賽收獲"><a href="#比賽收獲" class="headerlink" title="比賽收獲"></a>比賽收獲</h2><p>參加比賽的主旨是為了學習，累積經驗，有獲獎就是額外附加的價值。這次很高興可以入圍全國5G通訊大賽概念組-數位娛樂領域的總決賽。也有幸可以參加中華電信的企業參訪，這次的比賽真的收穫滿滿。這是我在台灣參加的第一場比賽，但我相信也不會是最後一次。</p>   <div>                                            <img alt="張永義 競賽圖片" data-src="/hexo/images/Mobilehero/Mobilehero_8.jpg" />                                            <p style="text-align: center;">團隊合照                                            </p>                                        </div><h2 id="作品佳績"><a href="#作品佳績" class="headerlink" title="作品佳績"></a>作品佳績</h2><p>TintuFull這個作品也在資策會雲端數據平台（IDEAS Chain）上作為應用案例的分享，作品的雛形也放在在北部、中部、南部的學校輪流展出。<br>    <div><br>                                            <center> <img alt="張永義 競賽圖片" data-src="/hexo/images/Mobilehero/Mobilehero_9.jpg" width="500px" /><br>                                                <p style="text-align: center;">TintFull 作品展出</p><br>                                        </div></p><h2 id="作品連結"><a href="#作品連結" class="headerlink" title="作品連結"></a>作品連結</h2><p>TintFull 設計過程<br>TintFull 作品成果<br>TintFull 在ideas hatch作為案例分享<br>TintFull 在ideas chain作為案例分享</p>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
.link{
            border-bottom: 1px solid gray;
            padding-bottom: 1.5px;
}

.flex-container {
    display: flex;
    fle</summary>
      
    
    
    
    <category term="比賽" scheme="https://benedict-cs.github.io/hexo/categories/%E6%AF%94%E8%B3%BD/"/>
    
    
    <category term="competition" scheme="https://benedict-cs.github.io/hexo/tags/competition/"/>
    
    <category term="University" scheme="https://benedict-cs.github.io/hexo/tags/University/"/>
    
  </entry>
  
</feed>
